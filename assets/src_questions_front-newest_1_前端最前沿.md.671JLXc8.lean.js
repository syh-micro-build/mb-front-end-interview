import{_ as a,c as o,a0 as r,o as t}from"./chunks/framework.Canm8p3M.js";const W=JSON.parse('{"title":"前端最前沿","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-newest/1_前端最前沿.md","filePath":"src/questions/front-newest/1_前端最前沿.md","lastUpdated":1735266018000}'),l={name:"src/questions/front-newest/1_前端最前沿.md"};function s(i,e,d,n,c,h){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="前端最前沿" tabindex="-1">前端最前沿 <a class="header-anchor" href="#前端最前沿" aria-label="Permalink to &quot;前端最前沿&quot;">​</a></h1><h2 id="什么是-webassembly-其主要用途是什么" tabindex="-1">什么是 WebAssembly？其主要用途是什么？ <a class="header-anchor" href="#什么是-webassembly-其主要用途是什么" aria-label="Permalink to &quot;什么是 WebAssembly？其主要用途是什么？&quot;">​</a></h2><h4 id="类型-架构" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w4、w5、w6" tabindex="-1">级别：<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w4、w5、w6" aria-label="Permalink to &quot;级别：`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> WebAssembly（简称 Wasm）是一种能够在浏览器中运行的低级二进制格式，设计用于高效、跨平台的计算密集型应用。它由 W3C 标准化，可在主流浏览器中运行。WebAssembly 允许开发者使用多种编程语言（如 C、C++、Rust）编写代码，然后将代码编译为 WebAssembly 模块，使其在浏览器中高效运行。其主要用途包括：</li><li><strong>1：</strong> 高性能计算：如游戏引擎、视频和图像处理。</li><li><strong>1：</strong> 跨平台：编译成字节码后能在多种平台（桌面端、移动端、嵌入式设备）上运行。</li><li><strong>1：</strong> 后端计算转移：如数据加密、解压缩等密集型运算从服务器转移到客户端。</li></ul><h2 id="webassembly-wasm-的核心特点有哪些" tabindex="-1">WebAssembly (Wasm) 的核心特点有哪些？ <a class="header-anchor" href="#webassembly-wasm-的核心特点有哪些" aria-label="Permalink to &quot;WebAssembly (Wasm) 的核心特点有哪些？&quot;">​</a></h2><h4 id="类型-架构-1" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-1" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w4、w5、w6-1" tabindex="-1">级别：<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 高性能：WebAssembly 的字节码格式在浏览器中编译运行接近原生速度，非常适合对性能要求高的任务。</li><li><strong>1：</strong> 跨平台支持：WebAssembly 是浏览器标准，适用于 Chrome、Firefox、Safari 等主流浏览器，且具备良好的跨平台兼容性。</li><li><strong>1：</strong> 安全性：Wasm 运行在沙盒环境，不能直接访问宿主机器资源，符合 Web 的安全模型。</li><li><strong>1：</strong> 语言多样性：支持 C、C++、Rust 等多种语言，弥补了 JavaScript 仅限于单语言开发的不足。</li><li><strong>1：</strong> 小体积：Wasm 格式文件较小，传输高效，加载速度快。</li></ul><h2 id="webassembly-的工作原理是什么" tabindex="-1">WebAssembly 的工作原理是什么？ <a class="header-anchor" href="#webassembly-的工作原理是什么" aria-label="Permalink to &quot;WebAssembly 的工作原理是什么？&quot;">​</a></h2><h4 id="类型-架构-2" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-2" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w4、w5、w6-2" tabindex="-1">级别：<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-1" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-1" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 编写源代码：使用支持 WebAssembly 的语言（如 C、C++ 或 Rust）编写源代码。</li><li><strong>1：</strong> 编译为 WebAssembly 模块：将源代码编译为 .wasm 文件，这是 WebAssembly 的二进制格式。</li><li><strong>1：</strong> 在浏览器中加载和运行：通过 JavaScript 在浏览器中加载 .wasm 文件并实例化。</li><li><strong>1：</strong> 执行 WebAssembly 函数：JavaScript 调用 WebAssembly 函数，执行高性能计算任务。</li></ul><h2 id="什么是pwa" tabindex="-1">什么是PWA？ <a class="header-anchor" href="#什么是pwa" aria-label="Permalink to &quot;什么是PWA？&quot;">​</a></h2><h4 id="类型-编程" tabindex="-1">类型：<code>编程</code> <a class="header-anchor" href="#类型-编程" aria-label="Permalink to &quot;类型：`编程`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> 渐进式网络应用（PWA）是谷歌在2015年底提出的概念。基本上算是web应用程序，但在外观和感觉上与原生app类似。支持PWA的网站可以提供脱机工作、推送通知和设备硬件访问等功能。</li></ul><h2 id="pwa有那些优点" tabindex="-1">PWA有那些优点？ <a class="header-anchor" href="#pwa有那些优点" aria-label="Permalink to &quot;PWA有那些优点？&quot;">​</a></h2><h4 id="类型-编程-1" tabindex="-1">类型：<code>编程</code> <a class="header-anchor" href="#类型-编程-1" aria-label="Permalink to &quot;类型：`编程`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-9分" tabindex="-1">解答（9分） <a class="header-anchor" href="#解答-9分" aria-label="Permalink to &quot;解答（9分）&quot;">​</a></h4><ul><li><strong>1：</strong> 更小更快: 渐进式的web应用程序比原生应用程序小得多。他们甚至不需要安装。这是他们没有浪费磁盘空间和加载速度非常快</li><li><strong>1：</strong> 响应式界面: PWA支持的网页能够自动适应各种屏幕大小。它可以是手机、平板、台式机或笔记本。</li><li><strong>1：</strong> 无需更新: 大多数移动应用程序需要每周定期更新。与普通网站一样，每当用户交互发生且不需要应用程序或游戏商店批准时，PWA总是加载最新更新版本</li><li><strong>1：</strong> 高性价比：原生移动应用需要分别为Android和iOS设备开发，开发成本非常高。另一方面，PWAs有着相同的功能，但只是先前价格的一小部分，开发成本低。</li><li><strong>1：</strong> SEO优势：搜索引擎可以发现PWAs，并且加载速度非常快。就像其他网站一样，它们的链接也可以共享。提供良好的用户体验和结果，在SEO排名提高。</li><li><strong>1：</strong> 脱机功能：由于service worker API的支持，可以在脱机或低internet连接中访问PWAs。</li><li><strong>1：</strong> 推送通知：通过推送通知的支持，PWAs轻松地与用户进行交互，提供非常棒的用户体验。</li><li><strong>1：</strong> 零安装：在浏览过程中，PWA会在手机和平板电脑上有自己的图标，就像移动应用程序一样，但不需要经过冗长的安装过程。</li><li><strong>1：</strong> 绕过应用商店</li></ul><h2 id="pwa有什么缺点" tabindex="-1">PWA有什么缺点？ <a class="header-anchor" href="#pwa有什么缺点" aria-label="Permalink to &quot;PWA有什么缺点？&quot;">​</a></h2><h4 id="类型-编程-2" tabindex="-1">类型：<code>编程</code> <a class="header-anchor" href="#类型-编程-2" aria-label="Permalink to &quot;类型：`编程`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><ul><li><strong>1：</strong> 对系统功能的访问权限较低：目前PWA对本机系统功能的访问权限比原生app有限。而且，所有的浏览器都不支持它的全部功能，但可能在不久的将来，它将成为新的开发标准。</li><li><strong>1：</strong> 多数Android，少数iOS：目前更多的支持来自Android。iOS系统只提供了部分。</li><li><strong>1：</strong> 没有审查标准：PWAs不需要任何适用于应用商店中本机应用的审查，这可能会加快进程，但缺乏从应用程序商店中获取推广效益。</li></ul>',31)]))}const w=a(l,[["render",s]]);export{W as __pageData,w as default};
