import{_ as i,c as s,a2 as e,o as l}from"./chunks/framework.Dvg3AjVP.js";const p=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-base/2_CSS.md","filePath":"src/questions/front-base/2_CSS.md","lastUpdated":1741601837000}'),n={name:"src/questions/front-base/2_CSS.md"};function t(h,a,o,d,r,c){return l(),s("div",null,a[0]||(a[0]=[e('<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="css-有哪些选择器-权重是如何计算的" tabindex="-1">CSS 有哪些选择器？权重是如何计算的？ <a class="header-anchor" href="#css-有哪些选择器-权重是如何计算的" aria-label="Permalink to &quot;CSS 有哪些选择器？权重是如何计算的？&quot;">​</a></h2><h4 id="类型-基础" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong><ul><li>基本选择器：ID 选择器 &gt; 类选择器/伪类选择器/属性选择器 &gt; 元素选择器/伪元素选择器 &gt; 通配符选择器</li><li>关系选择器：后代选择器、父子选择器、兄弟选择器</li></ul></li><li><strong>1：</strong> ID 选择器是百分位，类选择器/伪类选择器/属性选择器是十分位，元素选择器/伪元素选择器是个位，计算选择器组合后的数字就可以作为权重大小，通配符选择器与关系选择器都是零位，没有权重。</li></ul><h2 id="样式引入-link-和-import-的区别是什么" tabindex="-1">样式引入 link 和@import 的区别是什么？ <a class="header-anchor" href="#样式引入-link-和-import-的区别是什么" aria-label="Permalink to &quot;样式引入 link 和@import 的区别是什么？&quot;">​</a></h2><h4 id="类型-基础-1" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-1" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 语法和使用位置：link属于HTML标签，在<code>&lt;head&gt;</code>标签内使用；在 CSS 文件中或 HTML 文件的<code>&lt;style&gt;</code>标签内使用，或CSS文件中使用。</li><li><strong>1：</strong> 加载顺序：link 与 HTML 并行加载；@import 在页面加载完后加载，会阻塞后续资源。</li><li><strong>1：</strong> 兼容性：link 所有主流浏览器都支持；@import 老版本浏览器（如 IE5 以下）可能不支持。</li><li><strong>1：</strong> 性能：link 性能影响小，页面渲染快；@import 可能延长页面加载时间。</li></ul><h2 id="css中-transition和animation的区别" tabindex="-1">CSS中 transition和animation的区别？ <a class="header-anchor" href="#css中-transition和animation的区别" aria-label="Permalink to &quot;CSS中 transition和animation的区别？&quot;">​</a></h2><h4 id="类型-拓展" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-1" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong> Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性， 而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from .... to，而animation可以一帧一帧的。</li></ul><h2 id="margin-和-padding-的使用场景" tabindex="-1">margin 和 padding 的使用场景 <a class="header-anchor" href="#margin-和-padding-的使用场景" aria-label="Permalink to &quot;margin 和 padding 的使用场景&quot;">​</a></h2><h4 id="类型-基础-2" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-2" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-1" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-1" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong><ul><li>需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；</li><li>需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。</li></ul></li></ul><h2 id="如何清除浮动" tabindex="-1">如何清除浮动? <a class="header-anchor" href="#如何清除浮动" aria-label="Permalink to &quot;如何清除浮动?&quot;">​</a></h2><h4 id="类型-基础-3" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-3" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-1" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-1" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong><ul><li><p>用于父容器</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用于指定元素</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用于现代浏览器（不影响 overflow 行为）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flow-root</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>伪元素（兼容性较好）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul><h2 id="使元素消失的方法" tabindex="-1">使元素消失的方法? <a class="header-anchor" href="#使元素消失的方法" aria-label="Permalink to &quot;使元素消失的方法?&quot;">​</a></h2><h4 id="类型-基础-4" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-4" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-3" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-2" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-2" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong><ul><li><code>visibility: hidden;</code><ul><li>使元素不可见，但仍然占据文档流中的空间。</li><li>不可交互，无法点击、聚焦等。</li><li>适用于需要隐藏但保持布局的场景，比如工具提示的隐藏与显示。</li></ul></li><li><code>display: none;</code><ul><li>彻底移除元素，不会在页面上渲染，不占空间。</li><li>不可交互，也不会影响其他元素的排列。</li><li>适用于需要完全隐藏的场景，比如选项卡切换时隐藏某个内容区域。</li></ul></li><li><code>opacity: 0;</code><ul><li>使元素完全透明，但仍然占据空间，不会影响页面布局。</li><li>仍然可交互，即便不可见，鼠标事件仍然可触发。</li><li>常用于淡入淡出动画，比如 transition: opacity 0.5s ease;。</li></ul></li><li><code>z-index: -1;</code><ul><li>降低层级，可能导致被其他元素遮挡，但如果没有覆盖物，仍然可见。</li><li>仍然占据空间，也仍然可交互，如果页面上没有其他元素遮挡，仍可点击。</li><li>常用于背景图层或某些动画效果（如使元素看起来“沉入”页面）。</li></ul></li></ul></li></ul><h2 id="理解bfc吗" tabindex="-1">理解BFC吗？ <a class="header-anchor" href="#理解bfc吗" aria-label="Permalink to &quot;理解BFC吗？&quot;">​</a></h2><h4 id="类型-基础-5" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-5" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-2" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><strong>1：</strong> BFC（Block Formatting Context，块级格式化上下文）是CSS 布局中的一种渲染机制，它决定了块级元素如何定位及相互影响。BFC 具有独立的布局规则，内部元素不会影响外部元素。</li><li><strong>2：</strong><ul><li>防止 margin 折叠，让相邻元素的 margin 不会合并</li><li>清除浮动，让父元素包裹浮动子元素，防止高度塌陷</li><li>隔离布局，避免浮动元素影响其他元素</li><li>适应性布局，让 float 元素与普通元素共存</li></ul></li></ul><h2 id="解释-css-中的-flex-布局-并列举一些常用的-flex-属性及其作用" tabindex="-1">解释 CSS 中的 flex 布局，并列举一些常用的 flex 属性及其作用 <a class="header-anchor" href="#解释-css-中的-flex-布局-并列举一些常用的-flex-属性及其作用" aria-label="Permalink to &quot;解释 CSS 中的 flex 布局，并列举一些常用的 flex 属性及其作用&quot;">​</a></h2><h4 id="类型-基础-6" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-6" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-3" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-2" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-2" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> flex 布局（弹性布局）可以更方便地实现各种复杂的布局。常用属性包括： <ul><li>display: flex：将容器设置为弹性容器。</li><li>flex-direction：指定主轴方向，如 row（水平，从左到右）、row-reverse（水平，从右到左）、column（垂直，从上到下）、column-reverse（垂直，从下到上）。</li><li>justify-content：在主轴上对齐项目，如 flex-start（起始位置对齐）、flex-end（末尾位置对齐）、center（居中对齐）、space-between（两端对齐，项目之间均匀分布）、space-around（每个项目两侧均匀分布）。</li><li>align-items：在交叉轴上对齐项目，类似 justify-content 有 flex-start、flex-end、center、baseline（项目第一行文字基线对齐）、stretch（默认值，拉伸项目以适应容器）等取值。</li></ul></li></ul><h2 id="回流和重绘是什么-如何减少这类动作" tabindex="-1">回流和重绘是什么？如何减少这类动作？ <a class="header-anchor" href="#回流和重绘是什么-如何减少这类动作" aria-label="Permalink to &quot;回流和重绘是什么？如何减少这类动作？&quot;">​</a></h2><h4 id="类型-基础-7" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-7" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w4、w5、w6" tabindex="-1">级别：<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w4、w5、w6" aria-label="Permalink to &quot;级别：`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 回流（Reflow）是指浏览器重新计算元素的几何位置和尺寸，并重新布局整个或部分页面，性能开销较高</li><li><strong>2：</strong> 减少下方操作可以避免回流 <ul><li>操作DOM元素</li><li>修改元素布局属性（width、height、padding、border、margin、top、left、position、display）</li><li>监听窗口变化（resize ）</li><li>读取元素相对位置（offsetWidth、offsetHeight、clientWidth、clientHeight）</li></ul></li><li><strong>1：</strong> 重绘（Repaint）是指当元素的样式发生变化，但不影响布局时，浏览器重新绘制该元素，性能开销较低</li><li><strong>2：</strong> 减少下方操作可以避免重绘 <ul><li>修改颜色相关样式（color、background等）</li><li>修改阴影相关样式（box-shadow等）</li><li>修改显隐相关样式（display、visibility、opacity等）</li></ul></li></ul><h2 id="如何使用-calc-函数" tabindex="-1">如何使用 calc() 函数？ <a class="header-anchor" href="#如何使用-calc-函数" aria-label="Permalink to &quot;如何使用 calc() 函数？&quot;">​</a></h2><h4 id="类型-基础-8" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-8" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-3" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-3" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong> calc() 允许你在 CSS 中执行简单的数学运算，注意运算符前后一定要有空格，否则不生效。例如：</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: calc(100% - 20px);</span></span></code></pre></div><h2 id="css-中常用的布局方式有哪些" tabindex="-1">CSS 中常用的布局方式有哪些？ <a class="header-anchor" href="#css-中常用的布局方式有哪些" aria-label="Permalink to &quot;CSS 中常用的布局方式有哪些？&quot;">​</a></h2><h4 id="类型-基础-9" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-9" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-4" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-9-分" tabindex="-1">解答（9 分） <a class="header-anchor" href="#解答-9-分" aria-label="Permalink to &quot;解答（9 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 普通流布局（Normal Flow）。即默认文档流布局，如：文章、博客；</li><li><strong>1：</strong> 浮动布局（Float）。适合元素环绕和多列布局，如：图文环绕、商品列表；</li><li><strong>1：</strong> 定位布局（Position）。适合指定位置布局，如：悬浮按钮、固定导航栏、弹窗；</li><li><strong>1：</strong> 弹性布局（Flex）。适合一维布局（横向或纵向），如：导航栏、卡片列表、响应式设计；</li><li><strong>1：</strong> 网格布局（Grid）。适合二维布局（横向和纵向），如：整体网页布局、栅格设计；</li><li><strong>1：</strong> 多列布局（Multi Column）。<code>.columns {column-count: 3;column-gap: 20px;}</code>;如：新闻排版、杂志排版；</li><li><strong>1：</strong> 自适应布局（Responsive）。@media，适合跨设备展示的布局，如：网页响应式设计、跨设备兼容布局；</li><li><strong>1：</strong> 容器查询布局（Responsive）。<code>container-type: inline-size;@container</code>，适合容器内布局，如：组件响应式设计、（低代码）组件化开发；</li><li><strong>1：</strong> 子网格布局（Subgrid）。适合容器内响应布局，如：复杂表单、复杂表格、复杂列表；</li></ul><h2 id="解释-transform、translate、scale、rotate-等属性的使用" tabindex="-1">解释 transform、translate、scale、rotate 等属性的使用？ <a class="header-anchor" href="#解释-transform、translate、scale、rotate-等属性的使用" aria-label="Permalink to &quot;解释 transform、translate、scale、rotate 等属性的使用？&quot;">​</a></h2><h4 id="类型-基础-10" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-10" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-5" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-1" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-1" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> transform 用于在 2D 或 3D 空间中对元素进行旋转、缩放、平移等操作。</li><li><strong>1：</strong> translate(x, y)：平移元素</li><li><strong>1：</strong> rotate(deg)：旋转元素。</li><li><strong>1：</strong> scale(x, y)：缩放元素。</li></ul><h2 id="谈谈你对盒模型的理解" tabindex="-1">谈谈你对盒模型的理解？ <a class="header-anchor" href="#谈谈你对盒模型的理解" aria-label="Permalink to &quot;谈谈你对盒模型的理解？&quot;">​</a></h2><h4 id="类型-基础-11" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-11" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-3" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-3" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 标准盒模型：<code>box-sizing: content-box;</code>，实际占用宽度 = width + padding + border</li><li><strong>1：</strong> 怪异盒模型：<code>box-sizing: border-box;</code>，实际占用宽度 = width（不会额外增加 padding 和 border）</li></ul><h2 id="css3有哪些重要的新特性" tabindex="-1">CSS3有哪些重要的新特性？ <a class="header-anchor" href="#css3有哪些重要的新特性" aria-label="Permalink to &quot;CSS3有哪些重要的新特性？&quot;">​</a></h2><h4 id="类型-基础-12" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-12" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><p><strong>1：</strong> 选择器和伪类：</p><ul><li>属性选择器增强</li><li>新增伪类：:nth-child()、:first-of-type等</li><li>伪元素使用双冒号::before</li></ul></li><li><p><strong>1：</strong> 视觉效果：</p><ul><li>圆角(border-radius)</li><li>阴影(text-shadow/box-shadow)</li><li>渐变(linear-gradient/radial-gradient)</li><li>RGBA和HSLA颜色</li><li>不透明度(opacity)</li></ul></li><li><p><strong>1：</strong> 转换和动画：</p><ul><li>2D/3D转换(transform)</li><li>过渡效果(transition)</li><li>动画效果(animation/@keyframes)</li></ul></li><li><p><strong>1：</strong> 布局能力：</p><ul><li>弹性布局(display: flex)</li><li>网格布局(display: grid)</li><li>多列布局(column-count)</li><li>盒模型调整(box-sizing)</li></ul></li><li><p><strong>1：</strong> 响应式设计：</p><ul><li>媒体查询(@media)</li><li>视口单位(vh/vw)</li><li>图像适配(object-fit)</li><li>自定义属性(变量)</li></ul></li></ul><h2 id="谈谈你对css属性继承的理解" tabindex="-1">谈谈你对CSS属性继承的理解 <a class="header-anchor" href="#谈谈你对css属性继承的理解" aria-label="Permalink to &quot;谈谈你对CSS属性继承的理解&quot;">​</a></h2><h4 id="类型-基础-13" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-13" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-4" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分-1" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分-1" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><p><strong>1：</strong> 可继承属性</p><ul><li>字体相关：font、font-family、font-size、font-style、font-variant、font-weight</li><li>文本相关：color、letter-spacing、line-height、visibility、cursor、direction</li></ul></li><li><p><strong>1：</strong> 不可继承属性</p><ul><li>盒模型：width、height、margin、padding、border</li><li>定位 &amp; 布局：display、position、top、left、right、bottom、z-index、overflow</li><li>背景 &amp; 其他：background、box-shadow、visibility</li></ul></li><li><p><strong>1：</strong> 强制继承或不继承</p><ul><li><p>强制继承：inherit，<code>background-color: inherit;</code></p></li><li><p>阻止继承：initial，<code>color: initial;</code></p></li><li><p>恢复原继承模式：unset，多用于样式重置</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*对于 color，相当于 inherit */</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 对于 border，相当于 initial，变为默认无边框*/</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*或*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p><strong>1:</strong> 作用</p><ul><li>减少重复定义，降低代码量</li><li>特定情境禁止继承，保证元素独立性</li></ul></li></ul><h2 id="css-性能优化" tabindex="-1">CSS 性能优化 <a class="header-anchor" href="#css-性能优化" aria-label="Permalink to &quot;CSS 性能优化&quot;">​</a></h2><h4 id="类型-基础-14" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-14" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-5" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分-1" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分-1" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><ul><li><strong>3：</strong> 减少文件体积 <ul><li>使用css代码压缩工具</li><li>图片压缩</li><li>使用css预处理工具（less、sass等）</li><li>雪碧图</li><li>合理使用属性继承</li><li>减少重复声明</li></ul></li><li><strong>2：</strong> 降低计算成本 <ul><li>减少回流重绘</li><li>避免选择器嵌套</li><li>优先使用id、类选择器</li><li>合理使用css计算属性</li></ul></li><li><strong>1：</strong> 减少渲染阻塞 <ul><li>避免使用@import</li><li>合理拆分合并css文件，减少http请求数</li></ul></li></ul><h2 id="单行、多行文本溢出隐藏" tabindex="-1">单行、多行文本溢出隐藏 <a class="header-anchor" href="#单行、多行文本溢出隐藏" aria-label="Permalink to &quot;单行、多行文本溢出隐藏&quot;">​</a></h2><h4 id="类型-基础-15" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-15" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`&quot;">​</a></h4><h4 id="解答-3-分-1" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-1" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li>单行文本溢出</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;            // 溢出隐藏</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      // 溢出用省略号显示</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;         // 规定段落中的文本不进行换行</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>多行文本溢出</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;         // 作为弹性伸缩盒子模型显示</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-box-orient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vertical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; // 设置伸缩盒子的子元素排列方式</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">从上到下垂直排列</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-line-clamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        // 显示的行数</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;             // 溢出隐藏</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      // 溢出用省略号显示</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="如何根据设计稿进行移动端适配" tabindex="-1">如何根据设计稿进行移动端适配？ <a class="header-anchor" href="#如何根据设计稿进行移动端适配" aria-label="Permalink to &quot;如何根据设计稿进行移动端适配？&quot;">​</a></h2><h4 id="类型-基础-16" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-16" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-7" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-7" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-4" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-4" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1:</strong> 使用 rem，em，vw，vh 等相对单位针对设计稿进行px换算；</li><li><strong>1:</strong> 使用现成的 npm 包，如 postcss-pxtorem 进行换算支持。</li></ul><h2 id="实现一个扇形" tabindex="-1">实现一个扇形 <a class="header-anchor" href="#实现一个扇形" aria-label="Permalink to &quot;实现一个扇形&quot;">​</a></h2><h4 id="类型-编程" tabindex="-1">类型：<code>编程</code> <a class="header-anchor" href="#类型-编程" aria-label="Permalink to &quot;类型：`编程`&quot;">​</a></h4><h4 id="级别-w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分-2" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分-2" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li>用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    border-top-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="画一条0-5px的线" tabindex="-1">画一条0.5px的线 <a class="header-anchor" href="#画一条0-5px的线" aria-label="Permalink to &quot;画一条0.5px的线&quot;">​</a></h2><h4 id="类型-拓展-1" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-1" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w2、w3、w4、w5、w6-3" tabindex="-1">级别：<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w2、w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-2" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-2" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>2:</strong> 采用transform: scale()的方式，该方法用来定义元素的2D 缩放转换：</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transform: scale(0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><strong>2:</strong> 采用meta viewport的方式</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><h2 id="相邻图片为什么会产生间隙-该如何处理" tabindex="-1">相邻图片为什么会产生间隙？该如何处理？ <a class="header-anchor" href="#相邻图片为什么会产生间隙-该如何处理" aria-label="Permalink to &quot;相邻图片为什么会产生间隙？该如何处理？&quot;">​</a></h2><h4 id="类型-基础-17" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-17" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w2、w3、w4、w5、w6-4" tabindex="-1">级别：<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w2、w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-3" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-3" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1:</strong> 图片标签是行内块元素，浏览器会将相邻行内块之间的空白字符解析为空格，从而产生间隙。</li><li><strong>3:</strong> 处理方式 <ul><li>使用<code>display: block</code>；</li><li>使用负 margin 值；</li><li>父容器<code>font-size: 0</code>；</li></ul></li></ul><h2 id="单冒号和双冒号有什么区别" tabindex="-1">单冒号和双冒号有什么区别？ <a class="header-anchor" href="#单冒号和双冒号有什么区别" aria-label="Permalink to &quot;单冒号和双冒号有什么区别？&quot;">​</a></h2><h4 id="类型-基础-18" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-18" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-8" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-8" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-5" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-5" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1:</strong> 单冒号用于CSS3伪类（<code>:hover</code>、<code>:nth-child()</code>）</li><li><strong>1:</strong> 双冒号用于CSS3伪元素（<code>::before</code>、<code>::after</code>）</li></ul><h2 id="css-居中" tabindex="-1">CSS 居中 <a class="header-anchor" href="#css-居中" aria-label="Permalink to &quot;CSS 居中&quot;">​</a></h2><h4 id="类型-基础-19" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-19" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-9" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-9" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-4" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-4" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><p><strong>1:</strong> 水平居中</p><ul><li><code>text-align: center;</code>（文本、行内元素、行内块元素）</li><li><code>margin: auto;（</code>已知宽度的块级元素）</li><li><code>display: flex;justify-content: center;</code>（任意元素）</li></ul></li><li><p><strong>1:</strong> 垂直居中</p><ul><li><p><code>line-height</code>（适用于单行文本）</p></li><li><p><code>display: flex;align-items: center;</code>（任意元素）</p></li><li><p><code>position + transform</code>（任意元素）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p><strong>1:</strong> 水平居中+垂直居中</p><ul><li><p><code>flex</code>（任意元素），参考上方</p></li><li><p><code>position + transform</code>（任意元素），参考上方</p></li><li><p><code>possition + translate</code>（定宽定高）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.fixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>display: grid;place-items: center;</code>（现代浏览器）</p></li></ul></li></ul><h2 id="使用-css-grid-实现响应式圣杯布局-页面包含头部-header-、主内容-main-、侧边栏-sidebar-、底部-footer" tabindex="-1">使用 CSS Grid 实现响应式圣杯布局，页面包含头部(header)、主内容(main)、侧边栏(sidebar)、底部(footer) <a class="header-anchor" href="#使用-css-grid-实现响应式圣杯布局-页面包含头部-header-、主内容-main-、侧边栏-sidebar-、底部-footer" aria-label="Permalink to &quot;使用 CSS Grid 实现响应式圣杯布局，页面包含头部(header)、主内容(main)、侧边栏(sidebar)、底部(footer)&quot;">​</a></h2><h4 id="类型-编程、拓展" tabindex="-1">类型：<code>编程</code>、<code>拓展</code> <a class="header-anchor" href="#类型-编程、拓展" aria-label="Permalink to &quot;类型：`编程`、`拓展`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-6" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-6" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分-2" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分-2" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 容器定义 */</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 侧边栏固定200px，主内容自适应宽度 */</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 头部、底部高60px，内容自适应高度 */</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;header header header&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;sidebar main main&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;footer footer footer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  min-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 区块分配 */</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid-area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: header; }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.sidebar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid-area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: sidebar; }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid-area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main; }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid-area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: footer; }</span></span></code></pre></div><h2 id="css-动画和过渡的区别是什么-如何使用它们" tabindex="-1">CSS 动画和过渡的区别是什么？如何使用它们？ <a class="header-anchor" href="#css-动画和过渡的区别是什么-如何使用它们" aria-label="Permalink to &quot;CSS 动画和过渡的区别是什么？如何使用它们？&quot;">​</a></h2><h4 id="类型-基础-20" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-20" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-10" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-10" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分-3" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分-3" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><details><ul><li><strong>2：</strong> 过渡（Transition）： <ul><li>从一个状态到另一个状态的平滑过渡</li><li>需要触发条件（如hover）</li><li>只能定义开始和结束状态</li></ul></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: width </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>2：</strong> 动画（Animation）： <ul><li>可以定义多个状态的变化</li><li>可以循环播放</li><li>可以自动播放，无需触发条件</li></ul></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> slide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    50%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    100%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translateX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: slide </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ease</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> infinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>2：</strong> 主要区别： <ul><li>触发方式：过渡需要触发条件，动画可以自动播放</li><li>状态数量：过渡只有开始和结束两个状态，动画可以有多个状态</li><li>循环播放：动画可以循环播放，过渡不能</li><li>控制能力：动画的控制能力更强，可以精确控制中间状态</li></ul></li></ul></details><h2 id="css-中的-bem-命名规范是什么-为什么要使用它" tabindex="-1">CSS 中的 BEM 命名规范是什么？为什么要使用它？ <a class="header-anchor" href="#css-中的-bem-命名规范是什么-为什么要使用它" aria-label="Permalink to &quot;CSS 中的 BEM 命名规范是什么？为什么要使用它？&quot;">​</a></h2><h4 id="类型-拓展-2" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-2" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-11" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-11" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-6" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-6" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><details><ul><li><p><strong>2：</strong> BEM 命名规范：</p><ul><li>Block（块）：独立的组件，如 <code>.button</code></li><li>Element（元素）：属于块的一部分，用 <code>__</code> 连接，如 <code>.button__text</code></li><li>Modifier（修饰符）：改变块或元素的外观或行为，用 <code>--</code> 连接，如 <code>.button--large</code></li></ul></li><li><p><strong>2：</strong> 使用BEM的好处：</p><ul><li>提高代码的可读性和可维护性</li><li>避免CSS选择器嵌套过深</li><li>减少命名冲突</li><li>明确表达组件结构和关系</li><li>方便团队协作和代码复用</li></ul></li></ul></details><h2 id="display的block、inline和inline-block的区别" tabindex="-1">display的block、inline和inline-block的区别 <a class="header-anchor" href="#display的block、inline和inline-block的区别" aria-label="Permalink to &quot;display的block、inline和inline-block的区别&quot;">​</a></h2><h4 id="类型-基础-21" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-21" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code> <a class="header-anchor" href="#级别-w1、w2、w3" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`&quot;">​</a></h4><h4 id="解答-1-分-4" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-4" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><p>block： 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；</p><p>inline： 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</p><p>inline-block： 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。</p><h2 id="为什么有时候用translate来改变位置而不是定位" tabindex="-1">为什么有时候⽤translate来改变位置⽽不是定位？ <a class="header-anchor" href="#为什么有时候用translate来改变位置而不是定位" aria-label="Permalink to &quot;为什么有时候⽤translate来改变位置⽽不是定位？&quot;">​</a></h2><h4 id="类型-基础-22" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-22" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-7" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-7" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-7" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-7" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> transform 触发 GPU 加速，减少回流。</li><li><strong>1：</strong> position 修改会触发布局计算，性能更低。</li></ul><h2 id="对-css-sprites-的理解" tabindex="-1">对 CSS Sprites 的理解 <a class="header-anchor" href="#对-css-sprites-的理解" aria-label="Permalink to &quot;对 CSS Sprites 的理解&quot;">​</a></h2><h4 id="类型-基础-23" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-23" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-12" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-12" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-8" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-8" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> CSSSprites（精灵图、雪碧图），将一个页面涉及到的所有小图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。</li><li><strong>1:</strong> 优点： <ul><li>减少HTTP请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>减少图片的总大小</li></ul></li><li><strong>1:</strong> 缺点： <ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要重新布局整个图片，样式调试工作量很大</li></ul></li></ul><h2 id="什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x这种图片" tabindex="-1">什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？ <a class="header-anchor" href="#什么是物理像素-逻辑像素和像素密度-为什么在移动端开发时需要用到-3x-2x这种图片" aria-label="Permalink to &quot;什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？&quot;">​</a></h2><h4 id="类型-拓展-3" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-3" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-13" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-13" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-2" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-2" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 物理像素 是屏幕上的实际像素点，逻辑像素 是开发者在 CSS 中使用的抽象单位。</li><li><strong>1：</strong> 像素密度 决定了物理像素与逻辑像素的比例，常见比例有 @1x、@2x 和 @3x。</li><li><strong>1：</strong> 在移动端开发中，使用 @2x 和 @3x 图片是为了适配高像素密度屏幕，确保图片在不同设备上都能保持清晰。</li></ul><h2 id="css预处理器-后处理器是什么" tabindex="-1">CSS预处理器/后处理器是什么？ <a class="header-anchor" href="#css预处理器-后处理器是什么" aria-label="Permalink to &quot;CSS预处理器/后处理器是什么？&quot;">​</a></h2><h4 id="类型-基础-24" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-24" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w2、w3、w4、w5、w6-5" tabindex="-1">级别：<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w2、w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-9" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-9" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> CSS 预处理器（less、sass），主要用于编写更具表达力和灵活性的样式代码，提供变量、嵌套、混合等功能，最终编译成标准 CSS。</li><li><strong>1：</strong> CSS 后处理器（PostCSS），在 CSS 编写完成后进行优化和增强，确保样式在不同环境下的最佳表现，如自动添加浏览器前缀、压缩代码等。</li></ul><h2 id="对媒体查询的理解" tabindex="-1">对媒体查询的理解？ <a class="header-anchor" href="#对媒体查询的理解" aria-label="Permalink to &quot;对媒体查询的理解？&quot;">​</a></h2><h4 id="类型-基础-25" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-25" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-14" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-14" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-10" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-10" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 根据设备特性（如屏幕宽度）应用不同样式。</li><li><strong>1：</strong> 语法示例：<code>@media (max-width: 600px) { ... }</code>。</li></ul><h2 id="对-css-工程化的理解" tabindex="-1">对 CSS 工程化的理解 <a class="header-anchor" href="#对-css-工程化的理解" aria-label="Permalink to &quot;对 CSS 工程化的理解&quot;">​</a></h2><h4 id="类型-基础-26" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-26" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-8" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-8" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-3" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-3" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 规范化（Less/Sass+UnoCSS+Stylelint+Prettier） <ul><li>减少重复的样式代码</li><li>减少样式冲突</li><li>提升代码可维护性</li></ul></li><li><strong>1：</strong> 模块化（CSS Module / CSS in JS） <ul><li>避免类名全局污染</li><li>提高复用性</li></ul></li><li><strong>1：</strong> 自动化（Webpack/Vite+PostCSS） <ul><li>按需加载：拆分代码，减少首屏加载时间</li><li>代码压缩：减小文件体积</li><li>摇树：剔除无用样式</li><li>兼容：生成浏览器样式前缀</li></ul></li></ul><h2 id="什么是margin重叠问题-如何解决" tabindex="-1">什么是margin重叠问题？如何解决？ <a class="header-anchor" href="#什么是margin重叠问题-如何解决" aria-label="Permalink to &quot;什么是margin重叠问题？如何解决？&quot;">​</a></h2><h4 id="类型-基础-27" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-27" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-15" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-15" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-11" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-11" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 垂直方向相邻块元素 margin 会合并，合并后取最大值。</li><li><strong>1：</strong> 解决方案 <ul><li>触发 BFC（仅适用父子关系的margin重叠）</li><li>使用 padding 替代</li><li>将其中一个块元素改为行内块元素</li></ul></li></ul><h2 id="为什么要初始化-css-样式" tabindex="-1">为什么要初始化 CSS 样式 <a class="header-anchor" href="#为什么要初始化-css-样式" aria-label="Permalink to &quot;为什么要初始化 CSS 样式&quot;">​</a></h2><h4 id="类型-基础-28" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-28" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-16" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-16" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-5" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-5" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><p>消除浏览器默认样式差异（如 margin、padding），便于布局。</p><h2 id="什么是-fouc-无样式内容闪烁-你如何来避免-fouc" tabindex="-1">什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？ <a class="header-anchor" href="#什么是-fouc-无样式内容闪烁-你如何来避免-fouc" aria-label="Permalink to &quot;什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？&quot;">​</a></h2><h4 id="类型-拓展-4" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-4" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-17" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-17" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-6" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-6" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><p>无样式内容闪烁，因 CSS 加载延迟。解决方案：将 CSS 放在 <code>&lt;head&gt;</code> 中，避免使用 @import。</p><h2 id="浏览器是怎样解析css选择器的" tabindex="-1">浏览器是怎样解析CSS选择器的？ <a class="header-anchor" href="#浏览器是怎样解析css选择器的" aria-label="Permalink to &quot;浏览器是怎样解析CSS选择器的？&quot;">​</a></h2><h4 id="类型-拓展-5" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-5" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-9" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-9" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-12" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-12" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 从右向左解析。如： <code>.nav &gt; li a</code> 先匹配 a，再向上查找 li 和 .nav；</li><li><strong>1：</strong> 减少回溯开销</li></ul><h2 id="在网页中应该使用奇数还是偶数的字体" tabindex="-1">在网页中应该使用奇数还是偶数的字体？ <a class="header-anchor" href="#在网页中应该使用奇数还是偶数的字体" aria-label="Permalink to &quot;在网页中应该使用奇数还是偶数的字体？&quot;">​</a></h2><h4 id="类型-拓展-6" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-6" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-18" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-18" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-7" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-7" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><p>推荐偶数字体（如 14px、16px），避免点阵字体渲染问题。</p><h2 id="元素竖向百分比设定依据" tabindex="-1">元素竖向百分比设定依据？ <a class="header-anchor" href="#元素竖向百分比设定依据" aria-label="Permalink to &quot;元素竖向百分比设定依据？&quot;">​</a></h2><h4 id="类型-基础-29" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-29" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-19" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-19" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-8" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-8" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><p>竖向百分比（如 padding-top）依据父容器宽度计算。</p><h2 id="如果需要手动写动画-你认为最小时间间隔是多久-为什么" tabindex="-1">如果需要手动写动画，你认为最小时间间隔是多久，为什么？ <a class="header-anchor" href="#如果需要手动写动画-你认为最小时间间隔是多久-为什么" aria-label="Permalink to &quot;如果需要手动写动画，你认为最小时间间隔是多久，为什么？&quot;">​</a></h2><h4 id="类型-基础-30" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-30" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-10" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-10" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-13" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-13" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms。</p>',211)]))}const g=i(n,[["render",t]]);export{p as __pageData,g as default};
