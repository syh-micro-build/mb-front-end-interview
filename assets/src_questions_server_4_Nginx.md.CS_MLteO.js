import{_ as s,c as a,a2 as p,o as e}from"./chunks/framework.Dvg3AjVP.js";const m=JSON.parse('{"title":"Nginx","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/server/4_Nginx.md","filePath":"src/questions/server/4_Nginx.md","lastUpdated":1741601837000}'),l={name:"src/questions/server/4_Nginx.md"};function i(c,n,t,o,r,d){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h1><h2 id="基础配置" tabindex="-1">基础配置 <a class="header-anchor" href="#基础配置" aria-label="Permalink to &quot;基础配置&quot;">​</a></h2><h4 id="类型-拓展" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展" aria-label="Permalink to &quot;类型：\`拓展\`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：\`W1\`、\`W2\`、\`W3\`、\`W4\`、\`W5\`、\`W6\`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><details><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Nginx 启动时创建的 worker 进程的数量</span></span>
<span class="line"><span>worker_processes  1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 配置 Nginx 主进程的 PID 文件路径</span></span>
<span class="line"><span>#pid        logs/nginx.pid;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>events {</span></span>
<span class="line"><span>    # 指定每个 worker 进程可以同时处理的最大连接数</span></span>
<span class="line"><span>    worker_connections  1024;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>http {</span></span>
<span class="line"><span>    include       mime.types;</span></span>
<span class="line"><span>    default_type  application/octet-stream;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 提高文件传输的效率，特别是对于大文件来说</span></span>
<span class="line"><span>    sendfile        on;</span></span>
<span class="line"><span>    # 用于减少网络传输中的数据包数量，通过将多个小数据包合并成一个大数据包来提高网络传输的效率</span></span>
<span class="line"><span>    tcp_nopush     on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 指定了空闲连接的超时时间，即客户端和服务器之间保持连接的最长时间</span></span>
<span class="line"><span>    # 在这里，连接在 65 秒内没有任何活动就会被关闭。通过调整此值，您可以控制服务器上空闲连接的数量，以及资源的有效利用程度</span></span>
<span class="line"><span>    keepalive_timeout  65;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 启用 HTTP 响应的压缩功能，以减少传输的数据量，提高网络传输效率</span></span>
<span class="line"><span>    gzip  on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        # 端口</span></span>
<span class="line"><span>        listen       8099;</span></span>
<span class="line"><span>        server_name  localhost;</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>            root html-vue;</span></span>
<span class="line"><span>            # hash 路由的重定向</span></span>
<span class="line"><span>            try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span>            index index.html;</span></span>
<span class="line"><span>            # 跨域</span></span>
<span class="line"><span>            add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span></span>
<span class="line"><span>            # 允许跨域请求的方法包括 GET、POST 和 OPTIONS</span></span>
<span class="line"><span>            add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;</span></span>
<span class="line"><span>            # 允许跨域请求携带的自定义请求头</span></span>
<span class="line"><span>            add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span>            # 确保浏览器在使用缓存前必须与服务器确认资源是否被修改过</span></span>
<span class="line"><span>            if ($request_filename ~* ^.*?.(html|htm|js)$) {</span></span>
<span class="line"><span>              add_header Cache-Control no-cache;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>        location = /50x.html {</span></span>
<span class="line"><span>            root   html;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # 跨域代理 - 作用是不在 vue 项目中写死 ip</span></span>
<span class="line"><span>        # 这样配置后，再也不用给前端里面写固定的 ip</span></span>
<span class="line"><span>        location /data {</span></span>
<span class="line"><span>            # 删除 url 中的 /data 但是目前貌似不生效</span></span>
<span class="line"><span>            # rewrite ^/data/(.*)$ /$1 break;</span></span>
<span class="line"><span>            proxy_pass http://192.168.31.214:3000;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 基础访问</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen       80;</span></span>
<span class="line"><span>        server_name  localhost;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>            root   html;</span></span>
<span class="line"><span>            index  index.html index.htm;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        # 错误页面</span></span>
<span class="line"><span>        error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>        location = /50x.html {</span></span>
<span class="line"><span>            root   html;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # 跨域代理</span></span>
<span class="line"><span>        location /data {</span></span>
<span class="line"><span>            proxy_pass http://192.168.31.214:3000;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></details>`,6)]))}const u=s(l,[["render",i]]);export{m as __pageData,u as default};
