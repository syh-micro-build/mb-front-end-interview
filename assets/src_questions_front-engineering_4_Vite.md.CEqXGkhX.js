import{_ as a,c as i,a0 as s,o as t}from"./chunks/framework.Canm8p3M.js";const k=JSON.parse('{"title":"vite","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-engineering/4_Vite.md","filePath":"src/questions/front-engineering/4_Vite.md","lastUpdated":1736488146000}'),l={name:"src/questions/front-engineering/4_Vite.md"};function o(d,e,r,h,n,c){return t(),i("div",null,e[0]||(e[0]=[s('<h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h1><h2 id="_1-vite-如何处理-css-模块" tabindex="-1">1. Vite 如何处理 CSS 模块？ <a class="header-anchor" href="#_1-vite-如何处理-css-模块" aria-label="Permalink to &quot;1. Vite 如何处理 CSS 模块？&quot;">​</a></h2><h4 id="类型-架构" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> Vite 对 CSS 模块有内置支持，会将 CSS 模块中的类名转换为唯一的哈希值，以避免全局样式冲突。并且可以通过 import 语句引入 CSS 模块，在 JavaScript 文件中使用其导出的类名对象来应用样式到相应元素。</li></ul><h2 id="_2-vite-生产构建的主要优化策略有哪些" tabindex="-1">2. Vite 生产构建的主要优化策略有哪些？ <a class="header-anchor" href="#_2-vite-生产构建的主要优化策略有哪些" aria-label="Permalink to &quot;2. Vite 生产构建的主要优化策略有哪些？&quot;">​</a></h2><h4 id="类型-架构-1" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-1" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><details><ul><li><strong>1：</strong> 依赖预打包<br>  原理：在生产构建时，Vite 会对项目的依赖进行预打包。因为在开发阶段，Vite 利用浏览器原生的 ES 模块加载，每个依赖都是单独的模块请求。但在生产环境中，过多的小模块请求会影响性能。Vite 将多个依赖模块合并为一个或几个较大的 chunk 文件，减少 HTTP 请求数量。<br>  示例：比如一个项目使用了 lodash、axios 等多个库，Vite 会把这些库的相关模块打包到一起。假设在开发时，加载这些库可能会产生 10 个小的模块请求，经过预打包后可能只需要 1 - 2 个请求来加载这些库的代码。</li><li><strong>1：</strong> 代码压缩与混淆:<br>  原理： Vite 使用工具（如 Terser）对 JavaScript 代码进行压缩和混淆。压缩是去除代码中的空格、注释等冗余信息，减小文件体积。混淆则是将变量名、函数名等替换为更短或难以理解的名称，增加代码的安全性并且进一步减小体积。<br>  示例: 原始的 JavaScript 代码可能包含大量的注释和有意义的变量名如：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>经过压缩和混淆后可能变成类似function n(a,b){return a + b;}的形式，文件大小也会显著减小。</p><ul><li><p><strong>1：</strong> CSS 优化:  (1)提取公共 CSS：Vite 会将多个组件或模块中相同的 CSS 样式提取出来，合并到一个或多个 CSS 文件中。这样可以避免在每个组件的 HTML 文件中重复加载相同的 CSS 代码，减少文件大小和请求次数。  (2)压缩 CSS：使用工具（如 cssnano）对 CSS 文件进行压缩，去除不必要的空格、注释，优化 CSS 属性的表示方式等。例如，将color: #ffffff;可能会被优化为color:#fff;。</p></li><li><p><strong>1：</strong> 静态资源处理:  (1)哈希处理：对静态资源（如图片、字体等）进行哈希处理。当资源内容发生变化时，其哈希值也会改变，这样可以在浏览器中实现长效缓存。浏览器可以根据资源的哈希值判断是否需要重新请求资源。  (2)优化路径和加载方式：确保在生产环境中，静态资源的路径是正确的，并且以最优的方式加载。例如，对于一些小的图片，可能会被转换为 Base64 格式嵌入到 CSS 或 HTML 文件中，减少额外的请求。</p></li><li><p><strong>2：</strong> Tree - Shaking（摇树优化）:  原理：Vite 会分析代码的依赖关系，在打包过程中去除那些没有被实际使用的代码。例如，如果在一个 JavaScript 模块中引入了一个大型库，但只使用了其中的一个小功能，Vite 会将未使用的代码部分剔除。  示例：假设一个项目引入了lodash库，但只使用了_.isEmpty函数，Vite 会在打包时将lodash中其他未使用的函数代码排除，从而减小最终打包文件的大小。</p></li></ul></details><h2 id="_3-在-vite-项目中如何配置代理-proxy-以解决跨域问题" tabindex="-1">3. 在 Vite 项目中如何配置代理（Proxy）以解决跨域问题？ <a class="header-anchor" href="#_3-在-vite-项目中如何配置代理-proxy-以解决跨域问题" aria-label="Permalink to &quot;3. 在 Vite 项目中如何配置代理（Proxy）以解决跨域问题？&quot;">​</a></h2><h4 id="类型-架构-2" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-2" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 在 vite.config.js 中配置 server.proxy 选项，例如：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://backend-api-url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        rewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会将所有以 /api 开头的请求代理到指定的后端 API 地址，并根据 rewrite 规则修改请求路径。</span></span></code></pre></div><h2 id="_4-vite-在开发模式下如何实现快速启动" tabindex="-1">4. Vite 在开发模式下如何实现快速启动？ <a class="header-anchor" href="#_4-vite-在开发模式下如何实现快速启动" aria-label="Permalink to &quot;4. Vite 在开发模式下如何实现快速启动？&quot;">​</a></h2><h4 id="类型-架构-3" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-3" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-3" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-1" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-1" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> Vite 利用 ES 模块的原生支持，通过浏览器直接加载模块文件，避免了传统打包工具的打包和重构过程。这种方式大大减少了启动时间，实现了快速的热更新和模块替换。</li></ul><h2 id="_5-vite-如何支持-typescript" tabindex="-1">5. Vite 如何支持 TypeScript？ <a class="header-anchor" href="#_5-vite-如何支持-typescript" aria-label="Permalink to &quot;5. Vite 如何支持 TypeScript？&quot;">​</a></h2><h4 id="类型-架构-4" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-4" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-4" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-2" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-2" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> Vite 通过插件系统支持 TypeScript，无需额外配置即可直接处理 TypeScript 文件。Vite 在内部使用 esbuild 预处理 TypeScript 文件，这不仅提高了编译速度，还简化了配置过程。</li></ul><h2 id="_6-vite-与传统的-webpack-打包工具有何不同" tabindex="-1">6. Vite 与传统的 Webpack 打包工具有何不同？ <a class="header-anchor" href="#_6-vite-与传统的-webpack-打包工具有何不同" aria-label="Permalink to &quot;6. Vite 与传统的 Webpack 打包工具有何不同？&quot;">​</a></h2><h4 id="类型-架构-5" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-5" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-5" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-3" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-3" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> Vite 主要区别在于其开发模式的实现方式。Vite 在开发时不需要打包，而是直接通过浏览器加载模块，这使得启动速度更快。而 Webpack 在开发模式下仍然需要进行打包和热重载，这通常会更慢。此外，Vite 在生产构建时也采用了更现代的打包策略，如 Rollup，优化了打包输出。</li></ul><h2 id="_7-vite-项目构建速度快的原因是什么" tabindex="-1">7. Vite 项目构建速度快的原因是什么？ <a class="header-anchor" href="#_7-vite-项目构建速度快的原因是什么" aria-label="Permalink to &quot;7. Vite 项目构建速度快的原因是什么？&quot;">​</a></h2><h4 id="类型-架构-6" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-6" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-1" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-1" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong> Vite 利用了现代浏览器的原生 ES （ES Modules）模块支持，采用了按需加载和热更新技术。在开发过程中，它只加载和处理当前需要的模块，减少了不必要的代码编译和打包工作，并且通过快速 的热更新机制，使开发过程中能够迅速响应代码变化，提高了构建速度。</li></ul><h2 id="_8-vite是否支持-commonjs-写法" tabindex="-1">8. Vite是否支持 commonjs 写法？ <a class="header-anchor" href="#_8-vite是否支持-commonjs-写法" aria-label="Permalink to &quot;8. Vite是否支持 commonjs 写法？&quot;">​</a></h2><h4 id="类型-架构-7" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-7" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-7" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-7" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-2" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-2" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 纯业务代码，一般建议采用 ESM 写法。如果引入的三方组件或者三方库采用了 CJS 写法，vite 在预构建的时候就会将 CJS 模块转化为 ESM 模块。</li></ul><h2 id="_9-vite-对比-webpack-优缺点在哪" tabindex="-1">9. vite 对比 webpack ，优缺点在哪？ <a class="header-anchor" href="#_9-vite-对比-webpack-优缺点在哪" aria-label="Permalink to &quot;9. vite 对比 webpack ，优缺点在哪？&quot;">​</a></h2><h4 id="类型-架构-8" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-8" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-8" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-8" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-4" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-4" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p>优点:</p></li><li><p>更快的冷启动： Vite 借助了浏览器对 ESM 规范的支持，采取了与 Webpack 完全不同的 unbundle 机制</p></li><li><p>更快的热更新： Vite 采用 unbundle 机制，所以 dev server 在监听到文件发生变化以后，只需要通过 ws 连接通知浏览器去重新加载变化的文件，剩下的工作就交给浏览器去做了。</p></li></ul><p>-缺点:</p><ul><li><p>开发环境下首屏加载变慢：由于 unbundle 机制， Vite 首屏期间需要额外做其它工作。不过首屏性能差只发生在 dev server 启动以后第一次加载页面时发生。之后再 reload 页面时，首屏性能会好很多。原因是 dev server 会将之前已经完成转换的内容缓存起来。</p></li><li><p>开发环境下懒加载变慢：由于 unbundle 机制，动态加载的文件，需要做 resolve 、 load 、 transform 、 parse 操作，并且还有大量的 http 请求，导致懒加载性能也受到影响。</p></li><li><p>webpack支持的更广：由于 Vite 基于ES Module，所以代码中不可以使用CommonJs；webpack更多的关注兼容性, 而 Vite 关注浏览器端的开发体验。</p></li></ul><h2 id="_10-vite-常见的配置" tabindex="-1">10. Vite 常见的配置 <a class="header-anchor" href="#_10-vite-常见的配置" aria-label="Permalink to &quot;10. Vite 常见的配置&quot;">​</a></h2><h4 id="类型-架构-9" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-9" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-9" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-9" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><p>css.preprocessorOptions： 传递给 CSS 预处理器的配置选项，例如，我们可以定义一个全局变量文件，然后再引入这个文件：</p></li><li><p>css.postcss： PostCSS 也是用来处理 CSS 的，只不过它更像是一个工具箱，可以添加各种插件来处理 CSS（解决浏览器样式兼容问题、浏览器适配等问题）。例如：移动端使用 postcss-px-to-viewport 对不同设备进行布局适配：</p></li><li><p>resolve.alias： 定义路径别名也是我们常用的一个功能，我们通常会给 scr 定义一个路径别名：</p></li><li><p>resolve.extensions： 导入时想要省略的扩展名列表。默认值为 [&#39;.mjs&#39;, &#39;.js&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.json&#39;] 。</p></li><li><p>ptimizeDeps.force： 是否开启强制依赖预构建。node_modules 中的依赖模块构建过一次就会缓存在 node_modules/.vite/deps 文件夹下，下一次会直接使用缓存的文件。而有时候我们想要修改依赖模块的代码，做一些测试或者打个补丁，这时候就要用到强制依赖预构建。</p></li><li><p>server.host： 指定服务器监听哪个 IP 地址。默认值为 localhost ，只会监听本地的 127.0.0.1。</p></li><li><p>server.proxy： 反向代理也是我们经常会用到的一个功能，通常我们使用它来解决跨域问题。</p></li><li><p>server.port： 指定开发服务器端口。默认值为 3000 。</p></li><li><p>build.outdir： 指定打包文件的输出目录，默认值为 dist。</p></li><li><p>build.assetsDir： 指定生成静态资源的存放目录，默认值为 assets。</p></li><li><p>build.assetsInlineLimit： 图片转 base64 编码的阈值。为防止过多的 http 请求，Vite 会将小于此阈值的图片转为 base64 格式，可根据实际需求进行调整</p></li><li><p>plugins：可以使用官方插件，也可以社区插件。</p></li></ul><h2 id="_11-如何指定-vite-插件-的执行顺序" tabindex="-1">11. 如何指定 vite 插件 的执行顺序？ <a class="header-anchor" href="#_11-如何指定-vite-插件-的执行顺序" aria-label="Permalink to &quot;11. 如何指定 vite 插件 的执行顺序？&quot;">​</a></h2><h4 id="类型-架构-10" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-10" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-10" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-10" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-5" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-5" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p>可以使用 enforce 修饰符来强制插件的位置:</p></li><li><p>pre：在 Vite 核心插件之前调用该插件</p></li><li><p>post：在 Vite 构建插件之后调用该插件</p></li></ul><h2 id="_12-vite和webpack的区别" tabindex="-1">12. Vite和webpack的区别？ <a class="header-anchor" href="#_12-vite和webpack的区别" aria-label="Permalink to &quot;12. Vite和webpack的区别？&quot;">​</a></h2><h4 id="类型-架构-11" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-11" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-11" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-11" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-1" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-1" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><p>Vite 和 Webpack 都是现代化的前端构建工具，它们可以帮助开发者优化前端项目的构建和性能。虽然它们的目标是相似的，但它们在设计和实现方面有许多不同之处。</p></li><li><p>构建原理： Webpack 是一个静态模块打包器，通过对项目中的 JavaScript、CSS、图片等文件进行分析，生成对应的静态资源，并且可以通过一些插件和加载器来实现各种功能；Vite 则是一种基于浏览器原生 ES 模块解析的构建工具。</p></li><li><p>打包速度： Webpack 的打包速度相对较慢，Vite 的打包速度非常快。</p></li><li><p>配置难度： Webpack 的配置比较复杂，因为它需要通过各种插件和加载器来实现各种功能；Vite 的配置相对简单，它可以根据不同的开发场景自动配置相应的环境变量和配置选项。</p></li><li><p>插件和加载器： Webpack 有大量的插件和加载器可以使用，可以实现各种复杂的构建场景，例如代码分割、按需加载、CSS 预处理器等；Vite 的插件和加载器相对较少</p></li><li><p>Vite是按需加载，webpack是全部加载： 在HMR（热更新）方面，当改动了一个模块后，vite仅需让浏览器重新请求该模块即可，不像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高。</p></li><li><p>webpack是先打包再启动开发服务器，vite是直接启动开发服务器，然后按需编译依赖文件 由于vite在启动的时候不需要打包，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快。当浏览器请求某个模块时，再根据需要对模块内容进行编译，这种按需动态编译的方式，极大的缩减了编译时间。</p></li></ul><h2 id="_13-esbuild-和-rollup-都是-vite-的基础依赖-那么他们有啥不同" tabindex="-1">13. esbuild 和 rollup 都是 vite 的基础依赖， 那么他们有啥不同？ <a class="header-anchor" href="#_13-esbuild-和-rollup-都是-vite-的基础依赖-那么他们有啥不同" aria-label="Permalink to &quot;13. esbuild 和 rollup 都是 vite 的基础依赖， 那么他们有啥不同？&quot;">​</a></h2><h4 id="类型-架构-12" tabindex="-1">类型：<code>架构</code> <a class="header-anchor" href="#类型-架构-12" aria-label="Permalink to &quot;类型：`架构`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-12" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-12" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-2" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-2" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><p>esbuild：esbuild 是一个快速、可扩展的 JavaScript 打包器，它被用作 Vite 的默认构建工具。esbuild 的主要任务是将源代码转换为浏览器可以理解的代码，同时还支持压缩、代码分割、按需加载等功能。esbuild 利用其高性能的构建能力，实现了快速的开发服务器和热模块替换。</p></li><li><p>Rollup：Rollup 是一个 JavaScript 模块打包工具，也是 Vite 的另一个基础依赖。在 Vite 中，Rollup 主要用于生产构建阶段。它通过静态分析模块依赖关系，将多个模块打包为一个或多个最终的输出文件。Rollup 支持多种输出格式，如 ES 模块、CommonJS、UMD 等，可以根据项目的需要进行配置。</p></li><li><p>尽管 esbuild 和 Rollup 都是 Vite 的基础依赖，但它们的分工是不同的。esbuild 用于开发服务器阶段，通过实时编译和提供模块来实现快速的冷启动和热模块替换。而 Rollup 用于生产构建阶段，将源代码打包为最终可发布的文件，以用于部署到生产环境。这样的分工使得 Vite 在开发过程中能够快速响应变化，并在构建过程中生成高效的最终输出文件。</p></li></ul>',69)]))}const u=a(l,[["render",o]]);export{k as __pageData,u as default};
