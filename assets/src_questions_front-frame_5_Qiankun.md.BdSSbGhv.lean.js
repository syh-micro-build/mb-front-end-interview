import{_ as e,c as o,a0 as n,o as r}from"./chunks/framework.Canm8p3M.js";const q=JSON.parse('{"title":"Qiankun","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-frame/5_Qiankun.md","filePath":"src/questions/front-frame/5_Qiankun.md","lastUpdated":1736129865000}'),i={name:"src/questions/front-frame/5_Qiankun.md"};function t(d,a,l,c,s,h){return r(),o("div",null,a[0]||(a[0]=[n('<h1 id="qiankun" tabindex="-1">Qiankun <a class="header-anchor" href="#qiankun" aria-label="Permalink to &quot;Qiankun&quot;">​</a></h1><h2 id="当前主流的微前端方案大概有哪些" tabindex="-1">当前主流的微前端方案大概有哪些？ <a class="header-anchor" href="#当前主流的微前端方案大概有哪些" aria-label="Permalink to &quot;当前主流的微前端方案大概有哪些？&quot;">​</a></h2><h4 id="类型-拓展" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w4、w5、w6" tabindex="-1">级别：<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w4、w5、w6" aria-label="Permalink to &quot;级别：`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><ul><li><strong>1：</strong> iframe：Web中的原生方案，也是微前端的起源，接入很简单，但是最大缺点就是通信很麻烦。</li><li><strong>1：</strong> single-spa：较早兴起的微前端框架，是后续很多微前端框架的奠基石。</li><li><strong>1：</strong> qiankun：基于 single-spa，由阿里巴巴出品，国内比较主流的微前端方案。</li><li><strong>1：</strong> micro-app：基于 Webcomponent 的微前端方案，由京东出品。</li><li><strong>1：</strong> EMP：基于 webpack 5 module federation（模块联邦） 的微前端方案，由欢聚时代出品。</li><li><strong>1：</strong> 无界：腾讯推出的一款微前端解决方式。它是一种基于 Web Components + iframe 的全新微前端方案，继承 iframe 的优点，补足 iframe 的缺点，让 iframe 焕发新生</li></ul><h2 id="qiankun-有哪些优点" tabindex="-1">Qiankun 有哪些优点？ <a class="header-anchor" href="#qiankun-有哪些优点" aria-label="Permalink to &quot;Qiankun 有哪些优点？&quot;">​</a></h2><h4 id="类型-拓展-1" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-1" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 技术栈无关：支持不同技术栈的子应用集成，如 Vue、React、Angular 等。</li><li><strong>1：</strong> 独立开发部署：各个子应用可以独立开发、测试、部署，提高团队开发效率。</li><li><strong>1：</strong> 提升可维护性：便于对大型前端项目进行拆分和管理，降低代码复杂度，提升可维护性。</li><li><strong>1：</strong> 动态加载：根据需要动态加载子应用，优化资源加载和页面性能。</li></ul><h2 id="qiankun-如何实现子应用的加载" tabindex="-1">Qiankun 如何实现子应用的加载？ <a class="header-anchor" href="#qiankun-如何实现子应用的加载" aria-label="Permalink to &quot;Qiankun 如何实现子应用的加载？&quot;">​</a></h2><h4 id="类型-拓展-2" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-2" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>2：</strong> Qiankun 通过 registerMicroApps 方法注册子应用，传入子应用的配置信息，包括名称、入口地址、激活规则等。在运行时，根据路由变化或其他触发条件，动态地加 载子应用的 JavaScript 资源，创建子应用的实例，并将其挂载到指定的 DOM 节点上，实现子应用的加载展示。</li></ul><h2 id="qiankun-如何处理子应用之间的公共依赖" tabindex="-1">Qiankun 如何处理子应用之间的公共依赖？ <a class="header-anchor" href="#qiankun-如何处理子应用之间的公共依赖" aria-label="Permalink to &quot;Qiankun 如何处理子应用之间的公共依赖？&quot;">​</a></h2><h4 id="类型-拓展-3" tabindex="-1">类型：<code>拓展</code> <a class="header-anchor" href="#类型-拓展-3" aria-label="Permalink to &quot;类型：`拓展`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 可以将公共依赖提取到主应用中，通过主应用加载公共依赖并将其共享给子应用，避免子应用重复加载相同的依赖，减少资源浪费和提高性能。在注册子应用时，通过配 置 props 等方式将主应用中的公共依赖传递给子应用使用。</li></ul>',21)]))}const W=e(i,[["render",t]]);export{q as __pageData,W as default};
