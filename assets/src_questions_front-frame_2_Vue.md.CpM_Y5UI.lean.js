import{_ as e,c as i,a0 as s,o as t}from"./chunks/framework.Canm8p3M.js";const k=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-frame/2_Vue.md","filePath":"src/questions/front-frame/2_Vue.md","lastUpdated":1736488146000}'),l={name:"src/questions/front-frame/2_Vue.md"};function o(h,a,n,d,r,c){return t(),i("div",null,a[0]||(a[0]=[s('<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><h2 id="_1-vue3和vue2的区别" tabindex="-1">1. vue3和vue2的区别 <a class="header-anchor" href="#_1-vue3和vue2的区别" aria-label="Permalink to &quot;1. vue3和vue2的区别&quot;">​</a></h2><h4 id="类型-基础" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-11-分" tabindex="-1">解答（11 分） <a class="header-anchor" href="#解答-11-分" aria-label="Permalink to &quot;解答（11 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 源码组织方式变化：使用 TS 重写</li><li><strong>1：</strong> 支持 Composition API：基于函数的API，更加灵活组织组件逻辑（vue2用的是options api）</li><li><strong>1：</strong> 响应式系统提升：Vue3中响应式数据原理改成proxy，可监听动态新增删除属性，以及数组变化</li><li><strong>1：</strong> 编译优化：vue2通过标记静态根节点优化diff，Vue3 标记和提升所有静态根节点，diff的时候只需要对比动态节点内容</li><li><strong>1：</strong> 打包体积优化：移除了一些不常用的api（inline-template、filter）</li><li><strong>1：</strong> 生命周期的变化：使用setup代替了之前的beforeCreate和created</li><li><strong>1：</strong> Vue3 的 template 模板支持多个根标签</li><li><strong>1：</strong> Vuex状态管理：创建实例的方式改变,Vue2为new Store , Vue3为createStore</li><li><strong>1：</strong> Route 获取页面实例与路由信息：vue2通过this获取router实例，vue3通过使用 getCurrentInstance/ userRoute和userRouter方法获取当前组件实例</li><li><strong>1：</strong> Props 的使用变化：vue2 通过 this 获取 props 里面的内容，vue3 直接通过 props</li><li><strong>1：</strong> 父子组件传值：vue3 在向父组件传回数据时，如使用的自定义名称，如 backData，则需要在 emits 中定义一下</li></ul><h2 id="_2-watch-和-watcheffect-的区别" tabindex="-1">2. watch 和 watchEffect 的区别？ <a class="header-anchor" href="#_2-watch-和-watcheffect-的区别" aria-label="Permalink to &quot;2. watch 和 watchEffect 的区别？&quot;">​</a></h2><h4 id="类型-基础-1" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-1" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><ul><li><strong>1：</strong> watch ：既要指明监视的数据源，也要指明监视的回调。</li><li><strong>1：</strong> watchEffect 可以自动监听数据源作为依赖。不用指明监视哪个数据，监视的回调中用到哪个数据，那就监视哪个数据。</li><li><strong>1：</strong> watch 可以访问改变之前和之后的值，watchEffect 只能获取改变后的值。</li></ul><h2 id="_3-在-vue2-x-中如何检测数组的变化" tabindex="-1">3. 在 Vue2.x 中如何检测数组的变化？ <a class="header-anchor" href="#_3-在-vue2-x-中如何检测数组的变化" aria-label="Permalink to &quot;3. 在 Vue2.x 中如何检测数组的变化？&quot;">​</a></h2><h4 id="类型-基础-2" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-2" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> 使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</li></ul><h2 id="_4-在-v-if-与-v-show-的区别" tabindex="-1">4. 在 v-if 与 v-show 的区别？ <a class="header-anchor" href="#_4-在-v-if-与-v-show-的区别" aria-label="Permalink to &quot;4. 在 v-if 与 v-show 的区别？&quot;">​</a></h2><h4 id="类型-基础-3" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-3" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-3" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分-1" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分-1" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> 当条件不成立时，v-if不会渲染DOM元素，v-show操作的是样式(display)，切换当前DOM的显示和隐藏。</li></ul><h2 id="_5-如何实现-vue-组件的插槽-slot-有哪些类型的插槽" tabindex="-1">5. 如何实现 Vue 组件的插槽（slot）？有哪些类型的插槽？ <a class="header-anchor" href="#_5-如何实现-vue-组件的插槽-slot-有哪些类型的插槽" aria-label="Permalink to &quot;5. 如何实现 Vue 组件的插槽（slot）？有哪些类型的插槽？&quot;">​</a></h2><h4 id="类型-基础-4" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-4" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-4" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分-2" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分-2" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> 默认插槽、具名插槽、作用域插槽</li></ul><h2 id="_6-简述-vuex-的核心概念和工作流程" tabindex="-1">6. 简述 Vuex 的核心概念和工作流程 <a class="header-anchor" href="#_6-简述-vuex-的核心概念和工作流程" aria-label="Permalink to &quot;6. 简述 Vuex 的核心概念和工作流程&quot;">​</a></h2><h4 id="类型-基础-5" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-5" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-5" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><ul><li><strong>1：</strong> 核心概念:<br>  State：存储应用的状态数据，是一个单一的数据源，所有组件都可以访问, <br>  Mutations：用于同步修改 State 中的数据。 是唯一允许修改 State 的地方，它接收 State 作为第一个参数。<br>  Actions：用于处理异步操作，如异步数据获取等，它不能直接修改 State，而是通过提交 Mutations 来间接修改。<br>  Getters(类似于计算属性，用于从 State 中派生出一些新的数据，方便组件获取和使用)</li><li><strong>1：</strong> 工作流程：<br>组件通过 dispatch 方法触发 Actions，Actions 中可以进行异步操作，然后通过 commit 提交 Mutations， Mutations 同步修改 State 的数据，组件可以通过 mapState、mapGetters 等辅助函数获取 State 和 Getters 中的数据，从而实现数据的响应式变化 和组件的更新。</li></ul><h2 id="_7-vue项目中如何进行性能优化" tabindex="-1">7. Vue项目中如何进行性能优化？ <a class="header-anchor" href="#_7-vue项目中如何进行性能优化" aria-label="Permalink to &quot;7. Vue项目中如何进行性能优化？&quot;">​</a></h2><h4 id="类型-基础-6" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-6" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-10分" tabindex="-1">解答（10分） <a class="header-anchor" href="#解答-10分" aria-label="Permalink to &quot;解答（10分）&quot;">​</a></h4><details><ul><li><strong>1：</strong> 合理使用v-show和v-if：<br>  原理：v-if是真正的条件渲染，它会在条件为假时销毁组件，在条件为真时重新创建组件，这涉及到 DOM 元素的销毁和重建过程。 而v - show只是简单地切换元素的CSS的display属性，组件的 DOM 元素始终存在于文档中。<br>  应用场景：对于那些在运行时很少改变显示状态的组件，比如用户权限相关的组件，只有管理员才能看到的功能组件，使用v-if比较合适。 对于频繁切换显示隐藏状态的组件，如页面中的导航栏下拉菜单，使用v-show能减少组件的销毁和重建带来的性能损耗。<br></li><li><strong>1：</strong> 优化组件的props和events传递：<br>  原理：当组件的props发生变化时，组件会重新渲染。如果传递了不必要的props或者过于复杂的数据结构作为props，会增加组 件重新渲染的概率和成本。同样，过多的$emit事件也可能导致组件之间通信过于复杂，影响性能。<br>  应用场景：只传递组件真正需要的数据作为props。例如，一个列表组件只需要接收列表数据和展示格式相关的参数，而不需要接收整个应 用的状态数据。在组件内部，对于复杂的数据结构作为props，可以考虑使用Object.freeze()来冻结数据，防止在组件内部意外修改导致重新渲染。 对于$emit事件，只在必要时使用，并且确保事件名称清晰明了，避免过多的、不必要的事件通信。</li><li><strong>1：</strong> 使用keep-alive缓存组件:<br>  原理：keep-alive是 Vue 提供的一个内置组件，它能够缓存包裹在其中的组件。当组件被缓存时，再次激活这个组件时不会重新创建和 初始化，而是直接从缓存中取出，保留了组件之前的状态，从而减少了组件重新创建和渲染的开销。<br>  应用场景：适用于那些频繁切换但数据变化不大的组件。比如在一个多步骤表单应用中，用户在各个步骤之间来回切换，使用keep-alive包裹 表单步骤组件，可以避免每次切换步骤都重新创建表单组件，提高用户体验和应用性能。</li><li><strong>1：</strong> 列表渲染优化: 为v-for列表添加key属性<br>  原理：key属性是 Vue 用于识别v - for循环中的每个节点的唯一标识。当列表数据发生变化时，Vue 会根据key属性来更精准地判断哪些节点需要 更新、移动、添加或删除。如果没有key属性或者key属性不唯一，Vue 可能会进行不必要的 DOM 操作，导致性能下降。<br>  应用场景：在任何使用v - for进行列表渲染的地方都应该添加key属性。例如，渲染一个商品列表时，使用商品的唯一ID作为key</li><li><strong>2：</strong> 数据响应式优化: 避免过度的响应式数据<br>  原理：Vue 的响应式系统是通过Object.defineProperty()（在 Vue 3 中也有Proxy方式）对数据进行劫持来实现的。如果一个对象包含大量的数据， 并且这些数据大部分在组件的生命周期内都不会发生变化，将所有数据都设置为响应式会增加不必要的性能开销。<br>  应用场景：对于那些不需要响应式的数据，可以将其定义在组件的data属性之外。例如，一个组件中有一些常量数据，如固定的颜色列表、图标列表等，可以将 这些数据定义为普通的 JavaScript 对象，而不是放在data属性中。在 Vue 3 中，还可以使用shallowReactive或shallowRef来创建浅层响应式数据，只 对对象的第一层数据进行响应式处理，减少性能消耗。</li><li><strong>2：</strong> 路由层面优化: 路由懒加载<br>  原理：路由懒加载可以将路由对应的组件分割成不同的代码块，只有在访问该路由时才会加载对应的组件代码。这样可以减少应用初始加载时的代码体积，加 快首屏加载速度。<br>  应用场景：对于大型的单页面应用（SPA），尤其是包含多个页面或功能模块的应用，如一个电商应用中的商品详情页、购物车页、个人中心页等，都可以采用路由懒 加载的方式。在 Vue Router 中，可以使用动态import来实现路由懒加载，例如const ProductDetail = () =&gt; import(&#39;./views/ProductDetail.vue&#39;)，在 路由配置中{ path: &#39;/product - detail&#39;, component: ProductDetail }。</li><li><strong>1：</strong> 代码压缩和混淆（Webpack 相关）<br>  原理：在构建过程中，通过工具（如terser-webpack-plugin）对 JavaScript 代码进行压缩和混淆，可以减小代码文件的大小。压缩是去除代码中的空格、注 释等冗余信息，混淆是将代码中的变量名、函数名等替换为更短的、难以理解的名称，从而减少代码体积，加快下载速度。<br></li><li><strong>1：</strong> 合理设置chunk大小和数量（Webpack 相关）<br>  原理：chunk是webpack在打包过程中生成的代码块。合理设置chunk的大小和数量可以更好地利用浏览器的缓存机制，减少重复请求，提高加载效率。如果chunk过 大，可能会导致加载时间过长；如果chunk过小，会产生过多的请求，增加请求开销。<br>  应用场景：根据应用的模块划分和功能需求来设置chunk。例如，可以将公共的库代码（如Vue、Vuex、Vue Router等）打包成一个单独的chunk，将不同业务模块 的代码分别打包成其他chunk。在webpack配置中，可以通过splitChunks配置项来控制chunk的生成，例如：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      maxSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      maxAsyncRequests: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      maxInitialRequests: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      automaticNamePrefix: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chunk - &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheGroups: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vendors: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          reuseExistingChunk: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></details><h2 id="_8-v-model-双向绑定的原理是什么" tabindex="-1">8. v-model 双向绑定的原理是什么？ <a class="header-anchor" href="#_8-v-model-双向绑定的原理是什么" aria-label="Permalink to &quot;8. v-model 双向绑定的原理是什么？&quot;">​</a></h2><h4 id="类型-基础-7" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-7" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-7" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-7" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分-3" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分-3" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> v-model本质就是一个语法糖，可以看成是value + input方法的语法糖。 可以通过model属性的prop和event属性来进行自定义。原生的v-model，会根据标签的不同生成不同的事件和属性 。</li></ul><h2 id="_9-在v-if-和-v-for-的优先级哪个高" tabindex="-1">9. 在v-if 和 v-for 的优先级哪个高？ <a class="header-anchor" href="#_9-在v-if-和-v-for-的优先级哪个高" aria-label="Permalink to &quot;9. 在v-if 和 v-for 的优先级哪个高？&quot;">​</a></h2><h4 id="类型-基础-8" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-8" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-8" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-8" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分-4" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分-4" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> 在 vue2 中 v-for 的优先级更高，但是在 vue3 中优先级改变了。v-if 的优先级更高。</li></ul><h2 id="_10-ref与reactive的区别" tabindex="-1">10. ref与reactive的区别？ <a class="header-anchor" href="#_10-ref与reactive的区别" aria-label="Permalink to &quot;10. ref与reactive的区别？&quot;">​</a></h2><h4 id="类型-基础-9" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-9" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-9" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-9" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6分" tabindex="-1">解答（6分） <a class="header-anchor" href="#解答-6分" aria-label="Permalink to &quot;解答（6分）&quot;">​</a></h4><ul><li><strong>1：</strong> ref与reactive 是 Vue3 新推出的主要 API 之一，它们主要用于响应式数据的创建。</li><li><strong>1：</strong> ref 函数创建的响应式数据，在模板中可以直接被使用，在 JS 中需要通过 .value 的形式才能使用。</li><li><strong>1：</strong> ref 函数可以接收原始数据类型与引用数据类型。</li><li><strong>1：</strong> reactive 函数只能接收引用数据类型。</li><li><strong>1：</strong> ref 底层还是使用 reactive 来做，ref 是在 reactive 上在进行了封装，增强了其能力，使它支持了对原始数据类型的处理。</li><li><strong>1：</strong> 在 Vue3 中 reactive 能做的，ref 也能做，reactive 不能做的，ref 也能做。</li></ul><h2 id="_11-vue-3-中的teleport功能有什么作用-如何使用" tabindex="-1">11. Vue 3 中的Teleport功能有什么作用，如何使用？ <a class="header-anchor" href="#_11-vue-3-中的teleport功能有什么作用-如何使用" aria-label="Permalink to &quot;11. Vue 3 中的Teleport功能有什么作用，如何使用？&quot;">​</a></h2><h4 id="类型-基础-10" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-10" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-10" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-10" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-1" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-1" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><ul><li><strong>2：</strong> Teleport功能可以将组件的子树 “瞬移” 到 DOM 的其他位置，不受组件层级的限制。使用时，在组件中使用 <code>&lt;teleport&gt;</code> 标签包裹需要瞬移的元素，并 指定to属性为目标 DOM 元素的选择器或id。例如:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">teleport</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#app-root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">teleport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//会将包裹的元素移动到id为app-root的元素内部。</span></span></code></pre></div><h2 id="_12-如何在-vue-3-中实现自定义指令的全局注册和局部注册" tabindex="-1">12. 如何在 Vue 3 中实现自定义指令的全局注册和局部注册？ <a class="header-anchor" href="#_12-如何在-vue-3-中实现自定义指令的全局注册和局部注册" aria-label="Permalink to &quot;12. 如何在 Vue 3 中实现自定义指令的全局注册和局部注册？&quot;">​</a></h2><h4 id="类型-基础-11" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-11" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-11" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-11" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1分-5" tabindex="-1">解答（1分） <a class="header-anchor" href="#解答-1分-5" aria-label="Permalink to &quot;解答（1分）&quot;">​</a></h4><ul><li><strong>1：</strong> 全局注册在 main.js 中使用 app.directive(&#39;指令名&#39;, 指令对象)；局部注册在组件内，通过 directives: { &#39;指令名&#39;: 指令对象 }，指令对象包含 mounted、updated 等生命周期钩子函数用于定义指令行为。</li></ul><h2 id="_13-说一下-vue-ssr-的实现原理" tabindex="-1">13. 说一下 Vue SSR 的实现原理 <a class="header-anchor" href="#_13-说一下-vue-ssr-的实现原理" aria-label="Permalink to &quot;13. 说一下 Vue SSR 的实现原理&quot;">​</a></h2><h4 id="类型-基础-12" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-12" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-12" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-12" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p>SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端。</p></li><li><p>SSR有着更好的SEO、并且首屏加载速度更快等优点。不过它也有一些缺点，比如我们的开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境。还有就是服务器会有更大的负载需求。</p></li></ul><h2 id="_14-vue-组件的-data-为什么必须是函数" tabindex="-1">14. Vue 组件的 data 为什么必须是函数？ <a class="header-anchor" href="#_14-vue-组件的-data-为什么必须是函数" aria-label="Permalink to &quot;14. Vue 组件的 data 为什么必须是函数？&quot;">​</a></h2><h4 id="类型-基础-13" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-13" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-13" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-13" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-1" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-1" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</li></ul><h2 id="_15-vue-中的-spa-应用如何优化首屏加载速度" tabindex="-1">15. vue 中的 spa 应用如何优化首屏加载速度? <a class="header-anchor" href="#_15-vue-中的-spa-应用如何优化首屏加载速度" aria-label="Permalink to &quot;15. vue 中的 spa 应用如何优化首屏加载速度?&quot;">​</a></h2><h4 id="类型-基础-14" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-14" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-14" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-14" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><p>请求优化：CDN 将第三方的类库放到 CDN 上，能够大幅度减少生产环境中的项目体积，另外 CDN 能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。</p></li><li><p>缓存：将长时间不会改变的第三方类库或者静态资源设置为强缓存，将 max-age 设置为一个非常长的时间，再将访问路径加上哈希达到哈希值变了以后保证获取到最新资源，好的缓存策略有助于减轻服务器的压力，并且显著的提升用户的体验</p></li><li><p>gzip：开启 gzip 压缩，通常开启 gzip 压缩能够有效的缩小传输资源的大小。</p></li><li><p>http2：如果系统首屏同一时间需要加载的静态资源非常多，但是浏览器对同域名的 tcp 连接数量是有限制的(chrome 为 6 个)超过规定数量的 tcp 连接，则必须要等到之前的请求收到响应后才能继续发送，而 http2 则可以在多个 tcp 连接中并发多个请求没有限制，在一些网络较差的环境开启 http2 性能提升尤为明显。</p></li><li><p>懒加载：当 url 匹配到相应的路径时，通过 import 动态加载页面组件，这样首屏的代码量会大幅减少，webpack 会把动态加载的页面组件分离成单独的一个 chunk.js 文件</p></li><li><p>预渲染：由于浏览器在渲染出页面之前，需要先加载和解析相应的 html、css 和 js 文件，为此会有一段白屏的时间，可以添加loading，或者骨架屏幕尽可能的减少白屏对用户的影响体积优化</p></li><li><p>合理使用第三方库：对于一些第三方 ui 框架、类库，尽量使用按需加载，减少打包体积</p></li><li><p>使用可视化工具分析打包后的模块体积：webpack-bundle- analyzer 这个插件在每次打包后能够更加直观的分析打包后模块的体积，再对其中比较大的模块进行优化</p></li><li><p>提高代码使用率：利用代码分割，将脚本中无需立即调用的代码在代码构建时转变为异步加载的过程</p></li><li><p>封装：构建良好的项目架构，按照项目需求就行全局组件，插件，过滤器，指令，utils 等做一 些公共封装，可以有效减少我们的代码量，而且更容易维护资源优化</p></li><li><p>图片懒加载：使用图片懒加载可以优化同一时间减少 http 请求开销，避免显示图片导致的画面抖动，提高用户体验</p></li><li><p>使用 svg 图标：相对于用一张图片来表示图标，svg 拥有更好的图片质量，体积更小，并且不需要开启额外的 http 请求</p></li></ul><h2 id="_16-组件中写-name-选项有哪些好处" tabindex="-1">16. 组件中写 name 选项有哪些好处？ <a class="header-anchor" href="#_16-组件中写-name-选项有哪些好处" aria-label="Permalink to &quot;16. 组件中写 name 选项有哪些好处？&quot;">​</a></h2><h4 id="类型-基础-15" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-15" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-15" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-15" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-2" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-2" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p>可以通过名字找到对应的组件（ 递归组件：组件自身调用自身 ）</p></li><li><p>可以通过 name 属性实现缓存功能（keep-alive）</p></li><li><p>可以通过 name 来识别组件（跨级组件通信时非常重要）</p></li><li><p>使用 vue-devtools 调试工具里显示的组见名称是由 vue 中组件 name 决定的</p></li></ul><h2 id="_17-说一下-ref-的作用是什么" tabindex="-1">17. 说一下 ref 的作用是什么？ <a class="header-anchor" href="#_17-说一下-ref-的作用是什么" aria-label="Permalink to &quot;17. 说一下 ref 的作用是什么？&quot;">​</a></h2><h4 id="类型-基础-16" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-16" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-16" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-16" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-3" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-3" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><p>ref 的作用是被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。其特点是：</p><ul><li><p>如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素</p></li><li><p>基本用法，本页面获取 DOM 元素</p></li><li><p>获取子组件中的 data</p></li><li><p>调用子组件中的方法</p></li><li><p>使用 vue-devtools 调试工具里显示的组见名称是由 vue 中组件 name 决定的</p></li></ul><h2 id="_18-谈谈你对-vue-3-composition-api-中响应式原理的理解-以及它与-vue-2-x-中响应式原理的区别" tabindex="-1">18. 谈谈你对 Vue 3 Composition API 中响应式原理的理解，以及它与 Vue 2.x 中响应式原理的区别 <a class="header-anchor" href="#_18-谈谈你对-vue-3-composition-api-中响应式原理的理解-以及它与-vue-2-x-中响应式原理的区别" aria-label="Permalink to &quot;18. 谈谈你对 Vue 3 Composition API 中响应式原理的理解，以及它与 Vue 2.x 中响应式原理的区别&quot;">​</a></h2><h4 id="类型-基础-17" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-17" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-17" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-17" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分-1" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分-1" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><ul><li><strong>1：</strong> Vue 3 使用 ES6 的 Proxy 对象来实现响应式，它可以直接代理整个对象，而不仅仅是对象的属性。例如：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Proxy 能对对象的所有操作进行拦截，包括属性的读取、设置、删除等，从而实现更精准的响应式追踪。</span></span></code></pre></div><ul><li><strong>1：</strong> 对比 Vue 2.x 使用的 Object.defineProperty () 方法，它只能对对象的已有属性进行逐个劫持，对于新增属性需要使用Vue.set方法来手动触发响应式更新。</li><li><strong>1：</strong> 在 Vue 3 中，通过reactive创建的响应式对象是深层响应式的，而 Vue 2.x 中对象内部嵌套的对象，需要递归遍历进行深度响应式转换。</li></ul><h2 id="_19-在-vue-3-项目中-如何进行-ssr-服务器端渲染" tabindex="-1">19. 在 Vue 3 项目中，如何进行 SSR（服务器端渲染） <a class="header-anchor" href="#_19-在-vue-3-项目中-如何进行-ssr-服务器端渲染" aria-label="Permalink to &quot;19. 在 Vue 3 项目中，如何进行 SSR（服务器端渲染）&quot;">​</a></h2><h4 id="类型-基础-18" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-18" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-18" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-18" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分-2" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分-2" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><ul><li><strong>0：</strong> 搭建项目基础：创建 Vue 3 项目，可使用@vue/cli工具，通过命令vue create my-ssr-app创建项目，选择相关 Vue 3 选项。</li><li><strong>1：</strong> 添加 SSR 相关依赖：安装<code>@vue/server-renderer</code>和<code>express</code>等依赖，<code>@vue/server-renderer</code>用于服务器端渲染，<code>express</code>作为服务器框架。命令 为<code>npm install @vue/server-renderer express</code>。</li><li><strong>1：</strong> 创建服务器文件：在项目根目录下创建server.js文件，用于创建服务器和处理 SSR 逻辑。在文件中，引入express，创建服务器实例，设置路由，使 用@vue/server-renderer将 Vue 组件渲染为 HTML 字符串并返回。</li><li><strong>1：</strong> 调整 Vue 项目代码：在 Vue 项目中，需要创建一个用于服务器端渲染的入口文件，如<code>entry-server.js</code>，在该文件中，创建 Vue 应用实例，并导出。同时，可能 需要调整一些组件的逻辑，以适应服务器端渲染的环境。</li></ul><h2 id="_20-vue-3中的suspense组件的作用是什么-它是如何工作的" tabindex="-1">20. Vue 3中的Suspense组件的作用是什么，它是如何工作的？ <a class="header-anchor" href="#_20-vue-3中的suspense组件的作用是什么-它是如何工作的" aria-label="Permalink to &quot;20. Vue 3中的Suspense组件的作用是什么，它是如何工作的？&quot;">​</a></h2><h4 id="类型-基础-19" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-19" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-19" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-19" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-2" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-2" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><ul><li><strong>1：</strong> Suspense是在vue3中新提供的，用来处理异步组件的加载状态。</li><li><strong>1：</strong> Suspense 组件允许你指定一个加载中的状态<code>（fallback）</code>和一个加载失败的状态<code>（fallback slot）</code>，用于处理异步组件的加载状态。当异步组件加载时，会先显示加载中 的状态；加载完成后，会显示异步组件；如果加载失败，会显示加载失败的状态。</li></ul><h2 id="_21-vue的生命周期有哪些及每个生命周期做了什么" tabindex="-1">21. vue的生命周期有哪些及每个生命周期做了什么？ <a class="header-anchor" href="#_21-vue的生命周期有哪些及每个生命周期做了什么" aria-label="Permalink to &quot;21. vue的生命周期有哪些及每个生命周期做了什么？&quot;">​</a></h2><h4 id="类型-基础-20" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-20" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-20" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-20" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分-3" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分-3" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><ul><li><p>beforeCreate是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。</p></li><li><p>created是实例创建完成后触发的钩子，当前阶段已经完成了数据观测、属性和方法的运算，watch/event事件回调。然而，挂载阶段还没开始，$el属性目前不可见。</p></li><li><p>beforeMount是挂载开始之前被触发的钩子，相关的render函数首次被调用。该钩子在服务器端渲染期间不被调用。</p></li><li><p>mounted是el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。如果根实例挂载到一个文档内元素上，当mounted被调用时vm.$el也在文档内。该钩子在服务器端渲染期间不被调用。</p></li><li><p>beforeUpdate是数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p></li><li><p>updated是由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。当这个钩子被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。然而请注意，在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p></li><li><p>beforeDestroy是实例销毁之前调用。在这一步，实例仍然完全可用。</p></li><li><p>destroyed是Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p></li></ul><h2 id="_22-vue响应式原理是什么-vue3的响应式有何不同" tabindex="-1">22. vue响应式原理是什么？vue3的响应式有何不同? <a class="header-anchor" href="#_22-vue响应式原理是什么-vue3的响应式有何不同" aria-label="Permalink to &quot;22. vue响应式原理是什么？vue3的响应式有何不同?&quot;">​</a></h2><h4 id="类型-基础-21" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-21" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-21" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-21" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-3" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-3" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><ul><li><p>Vue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性，当页面使用对应属性时，首先会进行依赖收集(收集当前组件的watcher)如果属性发生变化会通知相关依赖进行更新操作(发布订阅)。</p></li><li><p>Vue3.x改用Proxy替代Object.defineProperty。因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</p></li></ul><h2 id="_23-谈一谈对-mvvm-的理解" tabindex="-1">23. 谈一谈对 MVVM 的理解？ <a class="header-anchor" href="#_23-谈一谈对-mvvm-的理解" aria-label="Permalink to &quot;23. 谈一谈对 MVVM 的理解？&quot;">​</a></h2><h4 id="类型-基础-22" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-22" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-22" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-22" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-4" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-4" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><ul><li>MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成ViewModel。Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据.</li></ul><h2 id="_24-vue2-x-和-vuex3-x-渲染器的-diff-算法分别说一下" tabindex="-1">24. vue2.x 和 vuex3.x 渲染器的 diff 算法分别说一下？ <a class="header-anchor" href="#_24-vue2-x-和-vuex3-x-渲染器的-diff-算法分别说一下" aria-label="Permalink to &quot;24. vue2.x 和 vuex3.x 渲染器的 diff 算法分别说一下？&quot;">​</a></h2><h4 id="类型-基础-23" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-23" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-23" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-23" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-5" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-5" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>简单来说，diff算法有以下过程</p><ul><li><p>同级比较，再比较子节点</p></li><li><p>先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)</p></li><li><p>比较都有子节点的情况(核心diff)</p></li><li><p>递归比较子节点</p></li></ul><p>Vue2的核心Diff算法采用了双端比较的算法，同时从新旧children的两端开始进行比较，借助key值找到可复用的节点，再进行相关操作。相比React的Diff算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。</p><p>Vue3.x借鉴了 ivi算法和 inferno算法</p><p>在创建VNode时就确定其类型，以及在mount/patch的过程中采用位运算来判断一个VNode的类型，在这个基础之上再配合核心的Diff算法，使得性能上较Vue2.x有了提升。(实际的实现可以结合Vue3.x源码看。)</p><h2 id="_25-vue-组件通信方式有哪些" tabindex="-1">25. vue 组件通信方式有哪些？ <a class="header-anchor" href="#_25-vue-组件通信方式有哪些" aria-label="Permalink to &quot;25. vue 组件通信方式有哪些？&quot;">​</a></h2><h4 id="类型-基础-24" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-24" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-24" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-24" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-6" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-6" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>父子组件通信</p><p>父-&gt;子props，子-&gt;父 $on、$emit</p><p>获取父子组件实例 $parent、$children</p><p>Ref 获取实例的方式调用组件的属性或者方法</p><p>Provide、inject 官方不推荐使用，但是写组件库时很常用</p><p>兄弟组件通信</p><p>Event Bus 实现跨组件通信，代码繁琐，不推荐</p><p>Vuex 官方推荐使用，功能强大，vue-devtools有插件支持</p><h2 id="_26-vue的路由实现-hash路由和history路由实现原理说一下" tabindex="-1">26. Vue的路由实现, hash路由和history路由实现原理说一下？ <a class="header-anchor" href="#_26-vue的路由实现-hash路由和history路由实现原理说一下" aria-label="Permalink to &quot;26. Vue的路由实现, hash路由和history路由实现原理说一下？&quot;">​</a></h2><h4 id="类型-基础-25" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-25" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-25" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-25" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-7" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-7" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p><code>location.hash</code>的值实际就是URL中<code>#</code>后面的东西。</p><p>history实际采用了HTML5中提供的API来实现，主要有history.pushState()和history.replaceState()。</p><h2 id="_27-keep-alive的常用属性有哪些及实现原理" tabindex="-1">27. keep-alive的常用属性有哪些及实现原理 <a class="header-anchor" href="#_27-keep-alive的常用属性有哪些及实现原理" aria-label="Permalink to &quot;27. keep-alive的常用属性有哪些及实现原理&quot;">​</a></h2><h4 id="类型-基础-26" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-26" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-26" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-26" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-8" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-8" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>keep-alive可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p><p>常用的两个属性include/exclude，允许组件有条件的进行缓存。</p><p>两个生命周期activated/deactivated，用来得知当前组件是否处于活跃状态。</p><p>keep-alive的中还运用了LRU(Least Recently Used)算法。</p><h2 id="_28-nexttick-的作用是什么-他的实现原理是什么" tabindex="-1">28. nextTick 的作用是什么？他的实现原理是什么？ <a class="header-anchor" href="#_28-nexttick-的作用是什么-他的实现原理是什么" aria-label="Permalink to &quot;28. nextTick 的作用是什么？他的实现原理是什么？&quot;">​</a></h2><h4 id="类型-基础-27" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-27" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-27" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-27" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-9" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-9" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>在下次 DOM 更新循环结束之后执行延迟回调。nextTick主要使用了宏任务和微任务。根据执行环境分别尝试采用</p><ul><li><p>Promise</p></li><li><p>MutationObserver</p></li><li><p>setImmediate</p></li><li><p>setTimeout</p></li></ul><p>定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p><h2 id="_29-说一下-vue-的-computed-的实现原理" tabindex="-1">29. 说一下 Vue 的 computed 的实现原理 <a class="header-anchor" href="#_29-说一下-vue-的-computed-的实现原理" aria-label="Permalink to &quot;29. 说一下 Vue 的 computed 的实现原理&quot;">​</a></h2><h4 id="类型-基础-28" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-28" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-28" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-28" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分-4" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分-4" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><p>当组件实例触发生命周期函数 beforeCreate 后，它会做一系列事情，其中就包括对 computed 的处理。</p><p>它会遍历 computed 配置中的所有属性，为每一个属性创建一个 Watcher 对象，并传入一个函数，该函数的本质其实就是 computed 配置中的 getter，这样一来，getter 运行过程中就会收集依赖</p><p>但是和渲染函数不同，为计算属性创建的 Watcher 不会立即执行，因为要考虑到该计算属性是否会被渲染函数使用，如果没有使用，就不会得到执行。因此，在创建 Watcher 的时候，它使用了 lazy 配置，lazy 配置可以让 Watcher 不会立即执行。</p><p>收到 lazy 的影响，Watcher 内部会保存两个关键属性来实现缓存，一个是 value，一个是 dirty</p><p>value 属性用于保存 Watcher 运行的结果，受 lazy 的影响，该值在最开始是 undefined</p><p>dirty 属性用于指示当前的 value 是否已经过时了，即是否为脏值，受 lazy 的影响，该值在最开始是 true</p><p>定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p><p>Watcher 创建好后，vue 会使用代理模式，将计算属性挂载到组件实例中</p><p>当读取计算属性时，vue 检查其对应的 Watcher 是否是脏值，如果是，则运行函数，计算依赖，并得到对应的值，保存在 Watcher 的 value 中，然后设置 dirty 为 false，然后返回。</p><p>如果 dirty 为 false，则直接返回 watcher 的 value</p><p>巧妙的是，在依赖收集时，被依赖的数据不仅会收集到计算属性的 Watcher，还会收集到组件的 Watcher</p><p>当计算属性的依赖变化时，会先触发计算属性的 Watcher 执行，此时，它只需设置 dirty 为 true 即可，不做任何处理。</p><p>由于依赖同时会收集到组件的 Watcher，因此组件会重新渲染，而重新渲染时又读取到了计算属性，由于计算属性目前已为 dirty，因此会重新运行 getter 进行运算</p><p>而对于计算属性的 setter，则极其简单，当设置计算属性时，直接运行 setter 即可。</p><h2 id="_30-说一下-vue-complier-的实现原理是什么样的" tabindex="-1">30. 说一下 Vue complier 的实现原理是什么样的？ <a class="header-anchor" href="#_30-说一下-vue-complier-的实现原理是什么样的" aria-label="Permalink to &quot;30. 说一下 Vue complier 的实现原理是什么样的？&quot;">​</a></h2><h4 id="类型-基础-29" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-29" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-29" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-29" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3分-5" tabindex="-1">解答（3分） <a class="header-anchor" href="#解答-3分-5" aria-label="Permalink to &quot;解答（3分）&quot;">​</a></h4><p>complier 的主要作用是解析模板，生成渲染模板的 render， 而 render 的作用主要是为了生成 VNode</p><p>complier 主要分为 3 大块：</p><ul><li><p>parse：接受 template 原始模板，按着模板的节点和数据生成对应的 ast</p></li><li><p>optimize：遍历 ast 的每一个节点，标记静态节点，这样就知道哪部分不会变化，于是在页面需要更新时，通过 diff 减少去对比这部分DOM，提升性能</p></li><li><p>generate 把前两步生成完善的 ast，组成 render 字符串，然后将 render 字符串通过 new Function 的方式转换成渲染函数</p></li></ul><h2 id="_31-说一下-watch-与-computed-的区别是什么" tabindex="-1">31. 说一下 watch 与 computed 的区别是什么？ <a class="header-anchor" href="#_31-说一下-watch-与-computed-的区别是什么" aria-label="Permalink to &quot;31. 说一下 watch 与 computed 的区别是什么？&quot;">​</a></h2><h4 id="类型-基础-30" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-30" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-30" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-30" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-10" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-10" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><ul><li><p>都是观察数据变化的（相同）</p></li><li><p>计算属性将会混入到 vue 的实例中，所以需要监听自定义变量；watch 监听 data 、props 里面数据的变化</p></li><li><p>computed 有缓存，它依赖的值变了才会重新计算，watch 没有；</p></li><li><p>watch 支持异步，computed 不支持；</p></li><li><p>watch 是一对多（监听某一个值变化，执行对应操作）；computed 是多对一（监听属性依赖于其他属性）</p></li><li><p>watch 监听函数接收两个参数，第一个是最新值，第二个是输入之前的值；</p></li><li><p>omputed 属性是函数时，都有 get 和 set 方法，默认走 get 方法，get 必须有返回值（return）</p></li></ul><h2 id="_32-说一下你知道的-vue-修饰符都有哪些" tabindex="-1">32. 说一下你知道的 vue 修饰符都有哪些？ <a class="header-anchor" href="#_32-说一下你知道的-vue-修饰符都有哪些" aria-label="Permalink to &quot;32. 说一下你知道的 vue 修饰符都有哪些？&quot;">​</a></h2><h4 id="类型-基础-31" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-31" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-31" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-31" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-11" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-11" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>事件修饰符</p><ul><li><p>.stop：阻止冒泡。</p></li><li><p>.prevent：阻止默认事件。</p></li><li><p>.capture：使用事件捕获模式。</p></li><li><p>.self：只在当前元素本身触发。</p></li><li><p>once：只触发一次。</p></li><li><p>passive：默认行为将会立即触发。</p></li></ul><p>按键修饰符</p><ul><li><p>.left：左键</p></li><li><p>.right：右键</p></li><li><p>.middle：滚轮</p></li><li><p>.enter：回车</p></li></ul><p>表单修饰符</p><ul><li><p>.lazy：在文本框失去焦点时才会渲染</p></li><li><p>.number：将文本框中所输入的内容转换为number类型</p></li><li><p>.trim：可以自动过滤输入首尾的空格</p></li></ul><h2 id="_33-怎么理解vue的单向数据流" tabindex="-1">33. 怎么理解Vue的单向数据流？ <a class="header-anchor" href="#_33-怎么理解vue的单向数据流" aria-label="Permalink to &quot;33. 怎么理解Vue的单向数据流？&quot;">​</a></h2><h4 id="类型-基础-32" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-32" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-32" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-32" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-12" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-12" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>单向数据流是指：数据在组件树中的流动方向，是从父组件流向子组件的。这个设计使得数据流更加可预测和易于调试，确保应用状态的一致性。</p><p>简单理解：父组件的状态对于子组件是只读的，子组件想改，只能通过事件的方式，通知父组件自己改。</p><h2 id="_34-vue中怎么异步加载组件" tabindex="-1">34. Vue中怎么异步加载组件 <a class="header-anchor" href="#_34-vue中怎么异步加载组件" aria-label="Permalink to &quot;34. Vue中怎么异步加载组件&quot;">​</a></h2><h4 id="类型-基础-33" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-33" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-33" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-33" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-13" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-13" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt; </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { defineAsyncComponent } from &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const MyComponent = defineAsyncComponent(() =&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import(&#39;./components/MyComponent.vue&#39;)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_35-为什么this-xx可以访问data中的数据" tabindex="-1">35. 为什么this.xx可以访问data中的数据? <a class="header-anchor" href="#_35-为什么this-xx可以访问data中的数据" aria-label="Permalink to &quot;35. 为什么this.xx可以访问data中的数据?&quot;">​</a></h2><h4 id="类型-基础-34" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-34" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-34" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-34" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-14" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-14" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>Vue在initData时，做了数据代理</p><ul><li><p>判断传入的data，函数就执行，对象不做处理</p></li><li><p>data 赋值给 vm._data</p></li><li><p>然后变量 vm._data对象，把可枚举属性的get代理到 vm上</p></li><li><p>访问vm.xxx 就相当于 vm._data.xx === vm.data.xx</p></li></ul><h2 id="_36-父组件如何监听子组件生命周期" tabindex="-1">36. 父组件如何监听子组件生命周期？ <a class="header-anchor" href="#_36-父组件如何监听子组件生命周期" aria-label="Permalink to &quot;36. 父组件如何监听子组件生命周期？&quot;">​</a></h2><h4 id="类型-基础-35" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-35" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-35" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-35" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-15" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-15" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><p>vue2 使用 @hook:mounted</p><p>vue3 使用 @vue:mounted</p><p>自定义事件，在子组件生命周期中去执行 下面是vue3的写法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;send&quot;&gt;Home</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 页面&lt;/h1&gt;</span></span>\n<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  &lt;Text</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @vue:mounted=&quot;fn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { onMounted, ref } from &#39;vue&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import Text from &#39;../components/Text.vue&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const fn = () =&gt; {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Text mounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_37-watch怎么停止监听" tabindex="-1">37. watch怎么停止监听？ <a class="header-anchor" href="#_37-watch怎么停止监听" aria-label="Permalink to &quot;37. watch怎么停止监听？&quot;">​</a></h2><h4 id="类型-基础-36" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-36" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-36" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-36" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-16" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-16" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> soptWatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count.value, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newVal, oldVal)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">soptWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="_37-vue中怎么做全局错误监听" tabindex="-1">37. Vue中怎么做全局错误监听？ <a class="header-anchor" href="#_37-vue中怎么做全局错误监听" aria-label="Permalink to &quot;37. Vue中怎么做全局错误监听？&quot;">​</a></h2><h4 id="类型-基础-37" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-37" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-37" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-37" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-17" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-17" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> soptWatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count.value, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newVal, oldVal)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">soptWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="_38-怎么监听子组件内的错误" tabindex="-1">38. 怎么监听子组件内的错误？ <a class="header-anchor" href="#_38-怎么监听子组件内的错误" aria-label="Permalink to &quot;38. 怎么监听子组件内的错误？&quot;">​</a></h2><h4 id="类型-基础-38" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-38" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-38" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-38" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2分-18" tabindex="-1">解答（2分） <a class="header-anchor" href="#解答-2分-18" aria-label="Permalink to &quot;解答（2分）&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子组件</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//父组件</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onErrorCaptured } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听到子组件错误，执行回调</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onErrorCaptured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>',242)]))}const u=e(l,[["render",o]]);export{k as __pageData,u as default};
