import{_ as e,c as o,a0 as i,o as t}from"./chunks/framework.Canm8p3M.js";const r="/mb-front-end-interview/assets/PSI.DssuX8Oe.png",l="/mb-front-end-interview/assets/Lighthouse.C6D1Hyb1.png",p=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-perfomance/1_前端性能优化.md","filePath":"src/questions/front-perfomance/1_前端性能优化.md","lastUpdated":1736129865000}'),n={name:"src/questions/front-perfomance/1_前端性能优化.md"};function s(d,a,h,c,g,u){return t(),o("div",null,a[0]||(a[0]=[i('<h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h1><h2 id="回流重绘" tabindex="-1">回流重绘 <a class="header-anchor" href="#回流重绘" aria-label="Permalink to &quot;回流重绘&quot;">​</a></h2><h4 id="类型-中级" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><p><strong>1：</strong> 回流：浏览器渲染页面之前需要对结构进行布局计算</p></li><li><p><strong>1：</strong> 重绘：将已经计算好布局的容器绘制出来</p></li><li><p><strong>1：</strong> 触发回流：页面上有容器的几何属性发生变更</p></li><li><p><strong>1：</strong> 触发重绘：容器非几何属性变更 （字体，颜色）</p></li><li><p><strong>1：</strong> 回流必定重绘，重绘不一定回流</p></li></ul><h2 id="前端性能指标有哪些" tabindex="-1">前端性能指标有哪些？ <a class="header-anchor" href="#前端性能指标有哪些" aria-label="Permalink to &quot;前端性能指标有哪些？&quot;">​</a></h2><h4 id="类型-中级-1" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-1" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-11-分" tabindex="-1">解答（11 分） <a class="header-anchor" href="#解答-11-分" aria-label="Permalink to &quot;解答（11 分）&quot;">​</a></h4><ul><li><strong>1：</strong> FCP：全称为 First Contentful Paint，即首次内容绘制，表示页面绘制其第一个非白色元素（如文本、图像、非空白 canvas 或 SVG）所需的时间。</li><li><strong>1：</strong> LCP：全称为 Largest Contentful Paint，即最大内容绘制，用于记录视窗内最大的元素绘制的时间，这个时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，该指标会在用户第一次交互后停止记录。</li><li><strong>1：</strong> TTFB：全称为 Time to First Byte，即首字节时间，表示从点击网页到接收到第一个字节的时间。</li><li><strong>1：</strong> TBT：全称为 Total Blocking Time，即总阻塞时间，用于衡量的是长任务对主线程的阻塞时间总和。即从首次内容绘制（FCP）到页面达到可交互时间（TTI）期间，主线程因运行长任务而被阻塞的总时间，因此，TBT 会对首次输入延迟有很大影响。长任务是指那些执行时间超过 50 毫秒的 JavaScript 任务，因为它们可能会阻塞页面的渲染和响应，从而影响用户体验。</li><li><strong>1：</strong> FMP：全称为 First Meaningful Paint，即首次有效渲染。它衡量的是从用户开始加载页面到浏览器首次渲染出对用户来说有意义的内容（如文本、图片、按钮等可交互元素）所花费的时间。</li><li><strong>1：</strong> FP：全称为 First Paint，即首次绘制，表示浏览器首次将像素渲染到屏幕上的时间点。在性能统计指标中，从用户开始访问 Web 页面的时间点到FP的时间点这段时间可以被视为白屏时间，即用户看到的都是没有任何内容的白色屏幕。FP 指标反映了页面的白屏时间，白屏时间的长短直接影响了用户的体验和满意度。</li><li><strong>1：</strong> SI：全称为 Speed Index，即速度指数，用于衡量页面渲染用户可见内容迅速程度。Speed Index 并不是一个具体的时间点，而是一个综合性指标。它表示页面从加载开始到页面内容基本可见的过程中，用户感受到的加载速度。该指标是基于视频捕获的可视进度或从绘制事件的可视进展来计算。</li><li><strong>1：</strong> CLS：全称为 Cumulative Layout Shift，即累积布局偏移，用于衡量一个页面在加载过程中，由于内容的加载和渲染，导致页面布局发生多次变化的情况。具体来说，CLS 指标衡量的是页面中可见元素在加载过程中由于内容加载而发生的位置偏移。这些元素可能因为图片、广告、视频等资源的加载而发生移动。如果一个页面的元素在加载过程中频繁移动，那么这个页面的 CLS 值就会比较高，这通常不是一个好的用户体验。</li><li><strong>1：</strong> INP：全称为 Interaction to Next Paint，即交互到下一次绘制，用来衡量用户与网页交互后，浏览器完成下一次屏幕绘制所需的时间。这个指标主要关注的是用户交互（如点击、触摸、键盘输入等）之后，页面响应并渲染新内容的速度。</li><li><strong>1：</strong> FID：全称为 First Input Delay，即首次输入延迟，是衡量网页性能的一个重要指标，它反映了用户在页面加载过程中首次与页面交互时的体验。FID 特别关注用户首次点击按钮、链接、输入字段等可交互元素时，页面响应这些交互所需的时间。</li><li><strong>1：</strong> TTI：全称为 Time To Interactive，即可交互时间，用于评估页面从开始加载到用户可以顺畅地与之交互的时间点。TTI 特别关注页面的响应性和交互性，它试图捕捉用户能够开始与页面进行流畅交互的瞬间。</li></ul><h2 id="core-web-vitals指的是什么" tabindex="-1">Core Web Vitals指的是什么？ <a class="header-anchor" href="#core-web-vitals指的是什么" aria-label="Permalink to &quot;Core Web Vitals指的是什么？&quot;">​</a></h2><h4 id="类型-中级-2" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-2" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-1" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><strong>1：</strong> Core Web Vitals 是一组由Google推出的关键用户体验指标，旨在帮助开发人员评估和优化网站的性能。这些指标主要关注三个方面：加载性能、交互性能和视觉稳定性。</li></ul><blockquote><p>Core Web Vitals 包含了三个指标：INP、LCP、CLS</p></blockquote><h2 id="性能测量工具有哪些" tabindex="-1">性能测量工具有哪些？ <a class="header-anchor" href="#性能测量工具有哪些" aria-label="Permalink to &quot;性能测量工具有哪些？&quot;">​</a></h2><h4 id="类型-中级-3" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-3" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-2" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><ul><li><strong>2：</strong> 可以借助 Gooogle 开源的 web-vitals 库来测量一些性能指标：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {onCLS, onINP, onLCP, onFCP, onFID, onTTFB} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;web-vitals&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCLS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onINP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onLCP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onFCP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onFID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onTTFB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log);</span></span></code></pre></div><ul><li><p><strong>2：</strong> 使用 Google 提供免费的 PageSpeed Insights (PSI) 工具来测试网站的性能：<br><img src="'+r+'" alt="alt text"></p></li><li><p><strong>2：</strong> 使用 Chrome Devtools 的 Lighthouse 选项卡测试性能指标： <img src="'+l+'" alt="alt text"></p></li></ul><h2 id="如何优化前端性能-列举一些常见的性能优化策略" tabindex="-1">如何优化前端性能？列举一些常见的性能优化策略 <a class="header-anchor" href="#如何优化前端性能-列举一些常见的性能优化策略" aria-label="Permalink to &quot;如何优化前端性能？列举一些常见的性能优化策略&quot;">​</a></h2><h4 id="类型-中级-4" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-4" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-3" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-10-分" tabindex="-1">解答（10 分） <a class="header-anchor" href="#解答-10-分" aria-label="Permalink to &quot;解答（10 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 减少 HTTP 请求：合并和压缩 CSS、JavaScript 文件，使用 CSS Sprites 合并小图标，减少页面加载所需的 HTTP 请求次数。</li><li><strong>1：</strong> 使用 CDN 加速：将静态资源（如图片、CSS、JavaScript 文件）托管在 CDN 上，加速资源的加载速度。</li><li><strong>1：</strong> 优化图片：使用适当的图片格式（如 WebP、JPEG 2000）和压缩图片大小，以减少页面加载时的图片大小。</li><li><strong>1：</strong> 延迟加载：对于页面中不是立即可见的内容（如图片、视频），可以采用延迟加载的方式，等到用户滚动到可见区域时再加载。</li><li><strong>1：</strong> 使用缓存：合理设置缓存策略，利用浏览器缓存和服务端缓存来减少重复请求和提高页面加载速度。</li><li><strong>1：</strong> 代码优化：避免冗余代码、优化代码结构、减少不必要的重复计算和操作，以提高代码执行效率。</li><li><strong>1：</strong> 减少重绘和重排：避免频繁的 DOM 操作、样式改变，以减少浏览器的重绘和重排，提高页面性能。</li><li><strong>1：</strong> 使用懒加载：对于长页面或内容较多的页面，可以使用懒加载技术，延迟加载部分内容，减少页面初次加载时的压力。</li><li><strong>1：</strong> 优化字体加载：避免同时加载多个字体文件，选择合适的字体格式和字体加载策略，以提高字体加载速度。</li><li><strong>1：</strong> 代码分割和按需加载：对于大型应用，可以将代码按照功能模块进行分割，按需加载，减少首屏加载时的代码量。</li></ul><h2 id="介绍一下浏览器渲染过程" tabindex="-1">介绍一下浏览器渲染过程 <a class="header-anchor" href="#介绍一下浏览器渲染过程" aria-label="Permalink to &quot;介绍一下浏览器渲染过程&quot;">​</a></h2><h4 id="类型-中级-5" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-5" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-4" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分-1" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分-1" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><strong>5：</strong> 浏览器的渲染过程主要包括以下几个步骤：</li></ul><blockquote><p>构建 DOM 树：浏览器通过解析 HTML 文档构建 DOM（文档对象模型）树，表示页面的结构和内容。<br> 构建 CSSOM 树：浏览器解析 CSS 样式表，构建 CSSOM（CSS 对象模型）树，表示页面的样式信息。<br> 合并 DOM 树和 CSSOM 树：将 DOM 树和 CSSOM 树合并，生成渲染树（Render Tree），其中只包含需要显示的节点和样式信息。<br> 布局（Layout）：根据渲染树计算每个节点在页面中的位置和大小，确定页面的布局。<br> 绘制（Painting）：根据布局信息，将页面内容绘制到屏幕上。</p></blockquote><h2 id="如何减少页面渲染时间" tabindex="-1">如何减少页面渲染时间？ <a class="header-anchor" href="#如何减少页面渲染时间" aria-label="Permalink to &quot;如何减少页面渲染时间？&quot;">​</a></h2><h4 id="类型-中级-6" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-6" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-5" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-6-分-1" tabindex="-1">解答（6 分） <a class="header-anchor" href="#解答-6-分-1" aria-label="Permalink to &quot;解答（6 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 减少 DOM 操作：避免频繁的 DOM 操作，可以一次性修改多个 DOM 节点，或者使用文档片段（DocumentFragment）来减少重排和重绘次数。</li><li><strong>1：</strong> 优化 CSS 样式：避免使用过多复杂的 CSS 选择器，减少样式层级嵌套，以减少 CSSOM 树的构建时间。</li><li><strong>1：</strong> 合理使用 CSS 动画：避免使用大量复杂的 CSS 动画，尽量使用 CSS3 动画代替 JavaScript 动画，以减少页面重绘次数。</li><li><strong>1：</strong> 延迟加载资源：将不是必须立即加载的资源（如图片、脚本）延迟加载，以减少页面初次加载时的压力。</li><li><strong>1：</strong> 使用浏览器缓存：合理设置缓存策略，利用浏览器缓存来减少资源的重复加载，提高页面加载速度。</li><li><strong>1：</strong> 代码优化：优化 JavaScript 代码，减少不必要的计算和操作，避免长时间运行的 JavaScript 代码影响页面渲染性能。</li></ul><h2 id="如何进行前端代码的打包和压缩-提高页面加载速度" tabindex="-1">如何进行前端代码的打包和压缩，提高页面加载速度？ <a class="header-anchor" href="#如何进行前端代码的打包和压缩-提高页面加载速度" aria-label="Permalink to &quot;如何进行前端代码的打包和压缩，提高页面加载速度？&quot;">​</a></h2><h4 id="类型-中级-7" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-7" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-6" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-6" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-7-分" tabindex="-1">解答（7 分） <a class="header-anchor" href="#解答-7-分" aria-label="Permalink to &quot;解答（7 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 使用构建工具：常用的前端构建工具有Webpack、Parcel、Rollup等，它们可以帮助将多个文件打包成一个或多个文件，减少网络请求次数，提高加载速度。</li><li><strong>1：</strong> 代码压缩：使用压缩工具（如UglifyJS、Terser）对 JavaScript、CSS 和 HTML 文件进行压缩，去除空格、注释、无用代码等，减小文件体积，加快加载速度。</li><li><strong>1：</strong> 图片压缩：对图片资源进行压缩处理，可以使用工具（如ImageOptim、TinyPNG）将图片压缩到合适的大小，减小文件体积，提高加载速度。</li><li><strong>1：</strong> 代码分割：按需加载代码，避免一次性加载所有代码，可以使用动态导入（dynamic import）或懒加载（lazy loading）等技术，根据需要加载不同模块，减少首次加载时间。</li><li><strong>1：</strong> 启用 Gzip 压缩：在服务器端启用 Gzip 压缩，将文件在传输过程中进行压缩，减小文件体积，加快加载速度。</li><li><strong>1：</strong> 缓存策略：合理设置缓存策略，利用浏览器缓存来减少资源重复加载，减少请求次数，提高页面加载速度。</li><li><strong>1：</strong> CDN 加速：将静态资源（如图片、CSS、JavaScript 文件）托管到 CDN（内容分发网络）上，利用 CDN 的分布式节点加速文件传输，提高加载速度。</li></ul><h2 id="如何实现前端性能监控" tabindex="-1">如何实现前端性能监控？ <a class="header-anchor" href="#如何实现前端性能监控" aria-label="Permalink to &quot;如何实现前端性能监控？&quot;">​</a></h2><h4 id="类型-中级-8" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-8" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-7" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-7" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 性能监控工具：使用性能监控工具（如Google Lighthouse、WebPageTest、GTmetrix）对网站进行性能评估，了解网站的加载速度、性能指标和问题点。</li><li><strong>1：</strong> 前端监控工具：使用前端监控工具（如Sentry、New Relic、Datadog）监控网站的前端错误、性能指标和用户行为，及时发现并解决问题。</li><li><strong>1：</strong> 性能指标：关注关键性能指标，如首次内容绘制（FCP）、可交互时间（TTI）、总体布局位移（CLS）等，优化这些指标可以提升用户体验。</li><li><strong>1：</strong> 监控用户行为：通过监控用户行为，了解用户在网站上的操作和反馈，及时优化网站性能和用户体验。</li></ul><h2 id="如何进行前端网络优化" tabindex="-1">如何进行前端网络优化 <a class="header-anchor" href="#如何进行前端网络优化" aria-label="Permalink to &quot;如何进行前端网络优化&quot;">​</a></h2><h4 id="类型-中级-9" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-9" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-8" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-8" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-5-分-2" tabindex="-1">解答（5 分） <a class="header-anchor" href="#解答-5-分-2" aria-label="Permalink to &quot;解答（5 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 使用CDN加速静态资源的加载，减少网络延迟。</li><li><strong>1：</strong> 启用HTTP/2协议，提高多个资源并行加载的效率。</li><li><strong>1：</strong> 使用预加载和预渲染技术，提前加载关键资源和页面，减少加载时间。</li><li><strong>1：</strong> 压缩资源（如JavaScript、CSS、图片），减小文件大小，加快下载速度。</li><li><strong>1：</strong> 使用缓存控制，利用浏览器缓存和服务端缓存，减少重复请求。</li></ul><h2 id="如何进行前端资源加载优化" tabindex="-1">如何进行前端资源加载优化 <a class="header-anchor" href="#如何进行前端资源加载优化" aria-label="Permalink to &quot;如何进行前端资源加载优化&quot;">​</a></h2><h4 id="类型-中级-10" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-10" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-9" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-9" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-1" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-1" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> 延迟加载非关键资源，如图片、视频等，提高页面加载速度。</li><li><strong>1：</strong> 使用懒加载技术，按需加载页面内容，减少首次加载时间。</li><li><strong>1：</strong> 将CSS放在页面头部，JavaScript放在页面底部，避免阻塞页面渲染。</li><li><strong>1：</strong> 使用异步加载和动态导入技术，按需加载JavaScript模块，减少首次加载时间。</li></ul><h2 id="前端错误监控的方案" tabindex="-1">前端错误监控的方案 <a class="header-anchor" href="#前端错误监控的方案" aria-label="Permalink to &quot;前端错误监控的方案&quot;">​</a></h2><h4 id="类型-中级-11" tabindex="-1">类型：<code>中级</code> <a class="header-anchor" href="#类型-中级-11" aria-label="Permalink to &quot;类型：`中级`&quot;">​</a></h4><h4 id="级别-w3、w4、w5、w6-10" tabindex="-1">级别：<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w3、w4、w5、w6-10" aria-label="Permalink to &quot;级别：`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-4-分-2" tabindex="-1">解答（4 分） <a class="header-anchor" href="#解答-4-分-2" aria-label="Permalink to &quot;解答（4 分）&quot;">​</a></h4><ul><li><strong>1：</strong> Real User Monitoring (RUM)：除了性能数据，也可以收集用户端的错误信息，包括JavaScript错误、网络请求错误等。</li><li><strong>1：</strong> JavaScript错误监控工具：如Sentry、Bugsnag、Rollbar等，用于捕获前端JavaScript错误并提供详细的错误信息和堆栈跟踪。</li><li><strong>1：</strong> 网络请求监控：监控网络请求的成功率、响应时间等指标，及时发现接口调用失败或延迟的问题。</li><li><strong>1：</strong> 全局错误处理：在前端代码中添加全局错误处理机制，捕获未被捕获的异常，避免影响用户体验。</li></ul>',65)]))}const k=e(n,[["render",s]]);export{p as __pageData,k as default};
