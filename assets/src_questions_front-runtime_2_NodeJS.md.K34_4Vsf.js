import{_ as a,c as o,a0 as d,o as l}from"./chunks/framework.Canm8p3M.js";const w=JSON.parse('{"title":"Node","description":"","frontmatter":{},"headers":[],"relativePath":"src/questions/front-runtime/2_NodeJS.md","filePath":"src/questions/front-runtime/2_NodeJS.md","lastUpdated":1735555615000}'),c={name:"src/questions/front-runtime/2_NodeJS.md"};function i(r,e,t,h,s,n){return l(),o("div",null,e[0]||(e[0]=[d('<h1 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h1><h2 id="_1-nodejs适用于哪些场景" tabindex="-1">1. Nodejs适用于哪些场景？ <a class="header-anchor" href="#_1-nodejs适用于哪些场景" aria-label="Permalink to &quot;1. Nodejs适用于哪些场景？&quot;">​</a></h2><h4 id="类型-基础" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><p>T后端开发，Nodejs的异步I/O天生适合做Web高并发。</p></li><li><p>BFF开发，比如SSR中间层或者GraphQL中间层。</p></li><li><p>前端基建，Webpack、Gulp、Babel、Jest等等前端工程化的工具或插件。</p></li></ul><h2 id="_2-nodejs的事件循环和浏览器有什么区别" tabindex="-1">2. Nodejs的事件循环和浏览器有什么区别？ <a class="header-anchor" href="#_2-nodejs的事件循环和浏览器有什么区别" aria-label="Permalink to &quot;2. Nodejs的事件循环和浏览器有什么区别？&quot;">​</a></h2><h4 id="类型-基础-1" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-1" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-1" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-1" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-1" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-1" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><p>Node.js 的事件循环和浏览器中的事件循环的区别在于，浏览器的异步任务分为宏任务队列和微任务队列，而Nodejs的异步任务分成了6个任务队列，按执行顺序分别为：</p><ul><li><p>timers阶段：处理setTimeout()和setInterval()等定时器事件。</p></li><li><p>I/O callbacks阶段：处理几乎所有的异步I/O回调，例如网络I/O、文件I/O等。</p></li><li><p>idle, prepare阶段：这是Node.js内部使用的，开发者很少会用到。</p></li><li><p>poll阶段：轮询阶段，用于等待新的I/O事件，执行I/O回调。</p></li><li><p>check阶段：执行setImmediate()的回调函数。</p></li><li><p>close callbacks阶段：执行关闭事件的回调函数，例如socket.on(&#39;close&#39;)。</p></li></ul><h2 id="_3-nodejs的内存泄漏排查方法有哪些" tabindex="-1">3. Nodejs的内存泄漏排查方法有哪些？ <a class="header-anchor" href="#_3-nodejs的内存泄漏排查方法有哪些" aria-label="Permalink to &quot;3. Nodejs的内存泄漏排查方法有哪些？&quot;">​</a></h2><h4 id="类型-基础-2" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-2" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-2" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-2" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-2" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-2" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><p>Node.js的内存泄漏排查方法有以下几种：</p><ul><li><p>使用Node.js自带的内存分析工具，如<code>process.memoryUsage()</code>和<code>heapdump</code>模块。</p></li><li><p>使用第三方内存分析工具，如Chrome DevTools、VisualVM等。</p></li><li><p>使用内存泄漏检测工具，如<code>leak</code>、<code>memwatch</code>等。</p></li><li><p>使用代码审查和静态分析工具，如ESLint、JSHint等。</p></li><li><p>使用单元测试和集成测试，确保代码的正确性和稳定性。</p></li></ul><h2 id="_4-nodejs的进程管理有哪些方法" tabindex="-1">4. Nodejs的进程管理有哪些方法？ <a class="header-anchor" href="#_4-nodejs的进程管理有哪些方法" aria-label="Permalink to &quot;4. Nodejs的进程管理有哪些方法？&quot;">​</a></h2><h4 id="类型-基础-3" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-3" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-3" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-3" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-3" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-3" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><p>Node.js的进程管理有以下几种方法：</p><ul><li><p>使用<code>child_process</code>模块创建子进程，并使用<code>process</code>模块进行进程间通信。</p></li><li><p>使用<code>cluster</code>模块创建集群，利用多核CPU资源。</p></li><li><p>使用<code>pm2</code>等第三方进程管理工具，如自动重启、负载均衡、日志管理等功能。</p></li><li><p>使用<code>forever</code>等第三方工具，如自动重启、日志管理等功能。</p></li><li><p>使用<code>node-mac</code>等第三方工具，如自动重启、日志管理等功能。</p></li></ul><h2 id="_5-nodejs的模块化有哪些方法" tabindex="-1">5. Nodejs的模块化有哪些方法？ <a class="header-anchor" href="#_5-nodejs的模块化有哪些方法" aria-label="Permalink to &quot;5. Nodejs的模块化有哪些方法？&quot;">​</a></h2><h4 id="类型-基础-4" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-4" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-4" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-4" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-4" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-4" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><p>Node.js的模块化有以下几种方法：</p><ul><li><p>CommonJS模块化：使用<code>require</code>和<code>module.exports</code>进行模块导入和导出。</p></li><li><p>ES6模块化：使用<code>import</code>和<code>export</code>进行模块导入和导出。</p></li><li><p>AMD模块化：使用<code>define</code>和<code>require</code>进行模块导入和导出。</p></li><li><p>UMD模块化：兼容CommonJS和AMD模块化。</p></li><li><p>全局变量：将变量挂载到<code>global</code>对象上，方便全局访问。</p></li><li><p>命名空间：将变量挂载到命名空间对象上，避免全局变量污染。</p></li><li><p>模块打包：使用Webpack、Rollup等工具将模块打包成一个文件，方便部署和分发。</p></li></ul><h2 id="_6-讲一下常见的nodejs框架" tabindex="-1">6. 讲一下常见的Nodejs框架？ <a class="header-anchor" href="#_6-讲一下常见的nodejs框架" aria-label="Permalink to &quot;6. 讲一下常见的Nodejs框架？&quot;">​</a></h2><h4 id="类型-基础-5" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-5" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-5" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-5" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-5" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-5" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><p>Koa：一个轻量的Nodejs框架，代码非常简洁。采用洋葱圈模型中间件，非常方便扩展功能，但是开发后端API需要进行再封装。</p></li><li><p>Express：Express也是一个轻量框架，Express和Koa的区别在于中间件机制。但总体差别不是很大，绝大多数Nodejs框架都是在Koa或者Express基础上封装的。</p></li><li><p>Eggjs：基于Koa封装的框架，整合了数据库、路由、安全防护、日志记录、异常处理等中间件，可以用来快速开发Rest或者Restful API项目。</p></li><li><p>Nestjs：基于TS,使用了大量的装饰器语法，开发体验类似于Java的Springboot。除此之外，Nestjs还提供了GraphQL、WebSocket、各种MQ和微服务的解决方案，比较适合大型后端项目的开发。</p></li></ul><h2 id="_7-nodejs的异步编程有哪些方法" tabindex="-1">7. Nodejs的异步编程有哪些方法？ <a class="header-anchor" href="#_7-nodejs的异步编程有哪些方法" aria-label="Permalink to &quot;7. Nodejs的异步编程有哪些方法？&quot;">​</a></h2><h4 id="类型-基础-6" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-6" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-6" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-6" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-6" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-6" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><p>Node.js的异步编程有以下几种方法：</p><ul><li><p>回调函数：将异步操作的结果作为回调函数的参数传递给回调函数。</p></li><li><p>Promise：将异步操作的结果封装成一个Promise对象，通过then和catch方法处理异步操作的结果。</p></li><li><p>async/await：将异步操作的结果封装成一个Promise对象，通过await关键字等待异步操作的结果。</p></li><li><p>Generator：将异步操作的结果封装成一个Generator对象，通过yield关键字等待异步操作的结果。</p></li><li><p>流程控制库：如<code>async</code>、<code>bluebird</code>、<code>co</code>等库，提供了更方便的异步编程方式。</p></li><li><p>事件驱动：通过事件驱动的方式处理异步操作，如<code>EventEmitter</code>、<code>Stream</code>等。</p></li></ul><h2 id="_8-nodejs的文件系统有哪些方法" tabindex="-1">8. Nodejs的文件系统有哪些方法？ <a class="header-anchor" href="#_8-nodejs的文件系统有哪些方法" aria-label="Permalink to &quot;8. Nodejs的文件系统有哪些方法？&quot;">​</a></h2><h4 id="类型-基础-7" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-7" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-7" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-7" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-7" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-7" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><p>Node.js的文件系统有以下几种方法：</p><ul><li><p><code>fs.readFile</code>：读取文件内容。</p></li><li><p><code>fs.writeFile</code>：写入文件内容。</p></li><li><p><code>fs.appendFile</code>：追加文件内容。</p></li><li><p><code>fs.unlink</code>：删除文件。</p></li><li><p><code>fs.rename</code>：重命名文件。</p></li><li><p><code>fs.stat</code>：获取文件信息。</p></li><li><p><code>fs.readdir</code>：读取目录内容。</p></li><li><p><code>fs.mkdir</code>：创建目录。</p></li><li><p><code>fs.rmdir</code>：删除目录。</p></li><li><p><code>fs.watch</code>：监听文件或目录的变化。</p></li></ul><h2 id="_9-什么是stream流-有哪些应用场景" tabindex="-1">9. 什么是Stream流，有哪些应用场景？ <a class="header-anchor" href="#_9-什么是stream流-有哪些应用场景" aria-label="Permalink to &quot;9. 什么是Stream流，有哪些应用场景？&quot;">​</a></h2><h4 id="类型-基础-8" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-8" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-8" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-8" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p>Stream是一种处理流式数据的抽象接口，用于读取、写入、转换和操作数据流。它是一个基于事件的 API，可以让我们以高效、低延迟的方式处理大型数据集。</p></li><li><p>比如读取文件，使用流我们可以一点一点来读取文件，每次只读取或写入文件的一小部分数据块，而不是一次性将整个文件读取或写入到内存中或磁盘中，这样做能够降低内存占用。</p></li></ul><h2 id="_10-什么是bff" tabindex="-1">10. 什么是BFF？ <a class="header-anchor" href="#_10-什么是bff" aria-label="Permalink to &quot;10. 什么是BFF？&quot;">​</a></h2><h4 id="类型-基础-9" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-9" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-9" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-9" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><p>BFF（Backend For Frontend）是中间层，由前端同学开发的后端项目。</p></li><li><p>最常见的BFF项目像SSR和GraphQL。SSR用来解决SEO问题，GraphQL用来聚合数据，解决API查询的问题。</p></li></ul><h2 id="_11-什么是orm-nodejs的orm框架有哪些" tabindex="-1">11. 什么是ORM？Nodejs的ORM框架有哪些？ <a class="header-anchor" href="#_11-什么是orm-nodejs的orm框架有哪些" aria-label="Permalink to &quot;11. 什么是ORM？Nodejs的ORM框架有哪些？&quot;">​</a></h2><h4 id="类型-基础-10" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-10" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-10" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-10" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-3-分-8" tabindex="-1">解答（3 分） <a class="header-anchor" href="#解答-3-分-8" aria-label="Permalink to &quot;解答（3 分）&quot;">​</a></h4><ul><li><p>ORM框架是通过对SQL语句进行封装，并将数据库的数据表和用户代码里的模型对象进行自动映射。</p></li><li><p>这样开发者使用时只需要调用模型对象的方法就能实现对数据库的增删改查，不用手写太多的SQL了。</p></li><li><p>Nodejs的ORM框架有Sequelize、TypeORM、Mongoose等。</p></li></ul><h2 id="_12-什么是微服务" tabindex="-1">12. 什么是微服务？ <a class="header-anchor" href="#_12-什么是微服务" aria-label="Permalink to &quot;12. 什么是微服务？&quot;">​</a></h2><h4 id="类型-基础-11" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-11" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-11" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-11" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-1-分-1" tabindex="-1">解答（1 分） <a class="header-anchor" href="#解答-1-分-1" aria-label="Permalink to &quot;解答（1 分）&quot;">​</a></h4><ul><li><p>微服务是一种架构风格，将一个大型应用拆分成多个小型、独立、可部署的服务，每个服务都运行在自己的进程中，并使用轻量级的通信机制（如HTTP、消息队列等）进行通信。</p></li><li><p>微服务架构的优点是每个服务都可以独立开发、部署和扩展，提高了开发效率和系统的可维护性。</p></li></ul><h2 id="_13-请介绍一下require的模块加载机制" tabindex="-1">13. 请介绍一下require的模块加载机制？ <a class="header-anchor" href="#_13-请介绍一下require的模块加载机制" aria-label="Permalink to &quot;13. 请介绍一下require的模块加载机制？&quot;">​</a></h2><h4 id="类型-基础-12" tabindex="-1">类型：<code>基础</code> <a class="header-anchor" href="#类型-基础-12" aria-label="Permalink to &quot;类型：`基础`&quot;">​</a></h4><h4 id="级别-w1、w2、w3、w4、w5、w6-12" tabindex="-1">级别：<code>W1</code>、<code>W2</code>、<code>W3</code>、<code>W4</code>、<code>W5</code>、<code>W6</code> <a class="header-anchor" href="#级别-w1、w2、w3、w4、w5、w6-12" aria-label="Permalink to &quot;级别：`W1`、`W2`、`W3`、`W4`、`W5`、`W6`&quot;">​</a></h4><h4 id="解答-2-分-1" tabindex="-1">解答（2 分） <a class="header-anchor" href="#解答-2-分-1" aria-label="Permalink to &quot;解答（2 分）&quot;">​</a></h4><ul><li><p>先计算模块路径</p></li><li><p>如果模块在缓存里面，取出缓存</p></li><li><p>如果是内置模块，取出内置模块</p></li><li><p>加载模块</p></li><li><p>输出模块的exports属性即可</p></li></ul>',72)]))}const u=a(c,[["render",i]]);export{w as __pageData,u as default};
